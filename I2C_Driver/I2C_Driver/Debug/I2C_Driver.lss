
I2C_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097f  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065b  00000000  00000000  00000c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fe  00000000  00000000  000012ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025a  00000000  00000000  00001b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
    /* Replace with your application code */
	TWI_VoidInit(PRESCALER_1,30,DISABLE_INT);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	6e e1       	ldi	r22, 0x1E	; 30
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	0e 94 41 00 	call	0x82	; 0x82 <TWI_VoidInit>
	//_delay_ms(50);
	TWI_VoidWriteByte(50,20,0X0A);
  76:	4a e0       	ldi	r20, 0x0A	; 10
  78:	64 e1       	ldi	r22, 0x14	; 20
  7a:	82 e3       	ldi	r24, 0x32	; 50
  7c:	0e 94 85 00 	call	0x10a	; 0x10a <TWI_VoidWriteByte>
  80:	ff cf       	rjmp	.-2      	; 0x80 <main+0x14>

00000082 <TWI_VoidInit>:
	return ((TWSR_REG) & (0XF8));
}


void TWI_VoidInit(u8 Prescaler,u8 Address,u8 INT_status)
{
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
}


static void TWI_VoidInterruptStatus(u8 INT_status)
{
	switch (INT_status)
  86:	44 23       	and	r20, r20
  88:	59 f1       	breq	.+86     	; 0xe0 <TWI_VoidInit+0x5e>
  8a:	41 30       	cpi	r20, 0x01	; 1
  8c:	01 f1       	breq	.+64     	; 0xce <TWI_VoidInit+0x4c>

void TWI_VoidInit(u8 Prescaler,u8 Address,u8 INT_status)
{
	TWI_VoidInterruptStatus(INT_status);
	//set Address value
	TWAR_REG =Address;
  8e:	62 b9       	out	0x02, r22	; 2
	//set bit rate value
	TWBR_REG =((u32)FOSC-16*(u32)SCL_FREQUENCY)/(2*(u32)SCL_FREQUENCY*Prescaler);
  90:	ac 2f       	mov	r26, r28
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	20 e4       	ldi	r18, 0x40	; 64
  96:	3d e0       	ldi	r19, 0x0D	; 13
  98:	43 e0       	ldi	r20, 0x03	; 3
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__muluhisi3>
  a0:	9b 01       	movw	r18, r22
  a2:	ac 01       	movw	r20, r24
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	78 ea       	ldi	r23, 0xA8	; 168
  a8:	81 e6       	ldi	r24, 0x61	; 97
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 c1 00 	call	0x182	; 0x182 <__udivmodsi4>
  b0:	20 b9       	out	0x00, r18	; 0
#include "I2C_REGISTERS.h"


static void TWI_VoidSetPrescaler(u8 Prescaler)
{
	switch (Prescaler)
  b2:	c1 30       	cpi	r28, 0x01	; 1
  b4:	19 f1       	breq	.+70     	; 0xfc <TWI_VoidInit+0x7a>
  b6:	d8 f0       	brcs	.+54     	; 0xee <TWI_VoidInit+0x6c>
  b8:	c2 30       	cpi	r28, 0x02	; 2
  ba:	59 f0       	breq	.+22     	; 0xd2 <TWI_VoidInit+0x50>
  bc:	c3 30       	cpi	r28, 0x03	; 3
  be:	11 f4       	brne	.+4      	; 0xc4 <TWI_VoidInit+0x42>
			CLEAR_Bit(TWSR_REG,0);
			SET_Bit(TWSR_REG,1);
			break;
		
		case PRESCALER_64:	
			SET_Bit(TWSR_REG,0);
  c0:	08 9a       	sbi	0x01, 0	; 1
			SET_Bit(TWSR_REG,1);
  c2:	09 9a       	sbi	0x01, 1	; 1
	//set bit rate value
	TWBR_REG =((u32)FOSC-16*(u32)SCL_FREQUENCY)/(2*(u32)SCL_FREQUENCY*Prescaler);
	//set Prescaler
	TWI_VoidSetPrescaler(Prescaler);
	//enable I2C
	SET_Bit(TWCR_REG,2);
  c4:	86 b7       	in	r24, 0x36	; 54
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	86 bf       	out	0x36, r24	; 54
}
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret
			SET_Bit(TWCR_REG,0);
			SET_Bit(SREG_REG,7);
			break;
		
		case DISABLE_INT:
			CLEAR_Bit(TWSR_REG,0);
  ce:	08 98       	cbi	0x01, 0	; 1
  d0:	de cf       	rjmp	.-68     	; 0x8e <TWI_VoidInit+0xc>
			SET_Bit(TWSR_REG,0);
			CLEAR_Bit(TWSR_REG,1);
			break;
		
		case PRESCALER_16:
			CLEAR_Bit(TWSR_REG,0);
  d2:	08 98       	cbi	0x01, 0	; 1
			SET_Bit(TWSR_REG,1);
  d4:	09 9a       	sbi	0x01, 1	; 1
	//set bit rate value
	TWBR_REG =((u32)FOSC-16*(u32)SCL_FREQUENCY)/(2*(u32)SCL_FREQUENCY*Prescaler);
	//set Prescaler
	TWI_VoidSetPrescaler(Prescaler);
	//enable I2C
	SET_Bit(TWCR_REG,2);
  d6:	86 b7       	in	r24, 0x36	; 54
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	86 bf       	out	0x36, r24	; 54
}
  dc:	cf 91       	pop	r28
  de:	08 95       	ret
static void TWI_VoidInterruptStatus(u8 INT_status)
{
	switch (INT_status)
	{
		case ENABLE_INT:
			SET_Bit(TWCR_REG,0);
  e0:	86 b7       	in	r24, 0x36	; 54
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	86 bf       	out	0x36, r24	; 54
			SET_Bit(SREG_REG,7);
  e6:	8f b7       	in	r24, 0x3f	; 63
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	8f bf       	out	0x3f, r24	; 63
  ec:	d0 cf       	rjmp	.-96     	; 0x8e <TWI_VoidInit+0xc>
static void TWI_VoidSetPrescaler(u8 Prescaler)
{
	switch (Prescaler)
	{
		case PRESCALER_1:
			CLEAR_Bit(TWSR_REG,0);
  ee:	08 98       	cbi	0x01, 0	; 1
			CLEAR_Bit(TWSR_REG,1);
  f0:	09 98       	cbi	0x01, 1	; 1
	//set bit rate value
	TWBR_REG =((u32)FOSC-16*(u32)SCL_FREQUENCY)/(2*(u32)SCL_FREQUENCY*Prescaler);
	//set Prescaler
	TWI_VoidSetPrescaler(Prescaler);
	//enable I2C
	SET_Bit(TWCR_REG,2);
  f2:	86 b7       	in	r24, 0x36	; 54
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	86 bf       	out	0x36, r24	; 54
}
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret
			CLEAR_Bit(TWSR_REG,0);
			CLEAR_Bit(TWSR_REG,1);
			break;
		
		case PRESCALER_4:
			SET_Bit(TWSR_REG,0);
  fc:	08 9a       	sbi	0x01, 0	; 1
			CLEAR_Bit(TWSR_REG,1);
  fe:	09 98       	cbi	0x01, 1	; 1
	//set bit rate value
	TWBR_REG =((u32)FOSC-16*(u32)SCL_FREQUENCY)/(2*(u32)SCL_FREQUENCY*Prescaler);
	//set Prescaler
	TWI_VoidSetPrescaler(Prescaler);
	//enable I2C
	SET_Bit(TWCR_REG,2);
 100:	86 b7       	in	r24, 0x36	; 54
 102:	84 60       	ori	r24, 0x04	; 4
 104:	86 bf       	out	0x36, r24	; 54
}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <TWI_VoidWriteByte>:


static void TWI_VoidSendStartCond(void)
{
	//save values of TWEN & TWIE bits
	TWCR_REG &=0X07;
 10a:	96 b7       	in	r25, 0x36	; 54
 10c:	97 70       	andi	r25, 0x07	; 7
 10e:	96 bf       	out	0x36, r25	; 54
	//clear TWINT flag
	SET_Bit(TWCR_REG,7);
 110:	96 b7       	in	r25, 0x36	; 54
 112:	90 68       	ori	r25, 0x80	; 128
 114:	96 bf       	out	0x36, r25	; 54
	//send start condition
	SET_Bit(TWCR_REG,5);
 116:	96 b7       	in	r25, 0x36	; 54
 118:	90 62       	ori	r25, 0x20	; 32
 11a:	96 bf       	out	0x36, r25	; 54
	//wait start condition to be transmitted
	while(GET_Bit(TWCR_REG,7) ==0);
 11c:	06 b6       	in	r0, 0x36	; 54
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <TWI_VoidWriteByte+0x12>
}


static u8 TWI_u8_GetStatus(void)
{
	return ((TWSR_REG) & (0XF8));
 122:	91 b1       	in	r25, 0x01	; 1
	if (TWI_u8_GetStatus() !=START_COND_CODE)
	{
		//error
	}
	//Slave address + write
	TWI_VoidWriteData((SlaveAddress<<1) | (WRITEMODE));
 124:	88 0f       	add	r24, r24


static void TWI_VoidWriteData(u8 Data)
{
	//save values of TWEN & TWIE bits
	TWCR_REG &=0X07;
 126:	96 b7       	in	r25, 0x36	; 54
 128:	97 70       	andi	r25, 0x07	; 7
 12a:	96 bf       	out	0x36, r25	; 54
	TWDR_REG=Data;
 12c:	83 b9       	out	0x03, r24	; 3
	//clear TWINT flag
	SET_Bit(TWCR_REG,7);
 12e:	86 b7       	in	r24, 0x36	; 54
 130:	80 68       	ori	r24, 0x80	; 128
 132:	86 bf       	out	0x36, r24	; 54
	//wait data to be transmitted
	while(GET_Bit(TWCR_REG,7) ==0);
 134:	06 b6       	in	r0, 0x36	; 54
 136:	07 fe       	sbrs	r0, 7
 138:	fd cf       	rjmp	.-6      	; 0x134 <TWI_VoidWriteByte+0x2a>
}


static u8 TWI_u8_GetStatus(void)
{
	return ((TWSR_REG) & (0XF8));
 13a:	81 b1       	in	r24, 0x01	; 1


static void TWI_VoidWriteData(u8 Data)
{
	//save values of TWEN & TWIE bits
	TWCR_REG &=0X07;
 13c:	86 b7       	in	r24, 0x36	; 54
 13e:	87 70       	andi	r24, 0x07	; 7
 140:	86 bf       	out	0x36, r24	; 54
	TWDR_REG=Data;
 142:	63 b9       	out	0x03, r22	; 3
	//clear TWINT flag
	SET_Bit(TWCR_REG,7);
 144:	86 b7       	in	r24, 0x36	; 54
 146:	80 68       	ori	r24, 0x80	; 128
 148:	86 bf       	out	0x36, r24	; 54
	//wait data to be transmitted
	while(GET_Bit(TWCR_REG,7) ==0);
 14a:	06 b6       	in	r0, 0x36	; 54
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <TWI_VoidWriteByte+0x40>
}


static u8 TWI_u8_GetStatus(void)
{
	return ((TWSR_REG) & (0XF8));
 150:	81 b1       	in	r24, 0x01	; 1


static void TWI_VoidWriteData(u8 Data)
{
	//save values of TWEN & TWIE bits
	TWCR_REG &=0X07;
 152:	86 b7       	in	r24, 0x36	; 54
 154:	87 70       	andi	r24, 0x07	; 7
 156:	86 bf       	out	0x36, r24	; 54
	TWDR_REG=Data;
 158:	43 b9       	out	0x03, r20	; 3
	//clear TWINT flag
	SET_Bit(TWCR_REG,7);
 15a:	86 b7       	in	r24, 0x36	; 54
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	86 bf       	out	0x36, r24	; 54
	//wait data to be transmitted
	while(GET_Bit(TWCR_REG,7) ==0);
 160:	06 b6       	in	r0, 0x36	; 54
 162:	07 fe       	sbrs	r0, 7
 164:	fd cf       	rjmp	.-6      	; 0x160 <TWI_VoidWriteByte+0x56>
}


static u8 TWI_u8_GetStatus(void)
{
	return ((TWSR_REG) & (0XF8));
 166:	81 b1       	in	r24, 0x01	; 1


static void TWI_VoidSendStopCond(void)
{
	//save values of TWEN & TWIE bits
	TWCR_REG &=0X07;
 168:	86 b7       	in	r24, 0x36	; 54
 16a:	87 70       	andi	r24, 0x07	; 7
 16c:	86 bf       	out	0x36, r24	; 54
	//clear TWINT flag
	SET_Bit(TWCR_REG,7);
 16e:	86 b7       	in	r24, 0x36	; 54
 170:	80 68       	ori	r24, 0x80	; 128
 172:	86 bf       	out	0x36, r24	; 54
	//send stop condition
	SET_Bit(TWCR_REG,4);
 174:	86 b7       	in	r24, 0x36	; 54
 176:	80 61       	ori	r24, 0x10	; 16
 178:	86 bf       	out	0x36, r24	; 54
	//wait stop condition to be transmitted
	while(GET_Bit(TWCR_REG,7) ==0);
 17a:	06 b6       	in	r0, 0x36	; 54
 17c:	07 fe       	sbrs	r0, 7
 17e:	fd cf       	rjmp	.-6      	; 0x17a <TWI_VoidWriteByte+0x70>
	{
		//error
	}
	//stop condition
	TWI_VoidSendStopCond();
}
 180:	08 95       	ret

00000182 <__udivmodsi4>:
 182:	a1 e2       	ldi	r26, 0x21	; 33
 184:	1a 2e       	mov	r1, r26
 186:	aa 1b       	sub	r26, r26
 188:	bb 1b       	sub	r27, r27
 18a:	fd 01       	movw	r30, r26
 18c:	0d c0       	rjmp	.+26     	; 0x1a8 <__udivmodsi4_ep>

0000018e <__udivmodsi4_loop>:
 18e:	aa 1f       	adc	r26, r26
 190:	bb 1f       	adc	r27, r27
 192:	ee 1f       	adc	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	a2 17       	cp	r26, r18
 198:	b3 07       	cpc	r27, r19
 19a:	e4 07       	cpc	r30, r20
 19c:	f5 07       	cpc	r31, r21
 19e:	20 f0       	brcs	.+8      	; 0x1a8 <__udivmodsi4_ep>
 1a0:	a2 1b       	sub	r26, r18
 1a2:	b3 0b       	sbc	r27, r19
 1a4:	e4 0b       	sbc	r30, r20
 1a6:	f5 0b       	sbc	r31, r21

000001a8 <__udivmodsi4_ep>:
 1a8:	66 1f       	adc	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	88 1f       	adc	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	1a 94       	dec	r1
 1b2:	69 f7       	brne	.-38     	; 0x18e <__udivmodsi4_loop>
 1b4:	60 95       	com	r22
 1b6:	70 95       	com	r23
 1b8:	80 95       	com	r24
 1ba:	90 95       	com	r25
 1bc:	9b 01       	movw	r18, r22
 1be:	ac 01       	movw	r20, r24
 1c0:	bd 01       	movw	r22, r26
 1c2:	cf 01       	movw	r24, r30
 1c4:	08 95       	ret

000001c6 <__muluhisi3>:
 1c6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__umulhisi3>
 1ca:	a5 9f       	mul	r26, r21
 1cc:	90 0d       	add	r25, r0
 1ce:	b4 9f       	mul	r27, r20
 1d0:	90 0d       	add	r25, r0
 1d2:	a4 9f       	mul	r26, r20
 1d4:	80 0d       	add	r24, r0
 1d6:	91 1d       	adc	r25, r1
 1d8:	11 24       	eor	r1, r1
 1da:	08 95       	ret

000001dc <__umulhisi3>:
 1dc:	a2 9f       	mul	r26, r18
 1de:	b0 01       	movw	r22, r0
 1e0:	b3 9f       	mul	r27, r19
 1e2:	c0 01       	movw	r24, r0
 1e4:	a3 9f       	mul	r26, r19
 1e6:	70 0d       	add	r23, r0
 1e8:	81 1d       	adc	r24, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	91 1d       	adc	r25, r1
 1ee:	b2 9f       	mul	r27, r18
 1f0:	70 0d       	add	r23, r0
 1f2:	81 1d       	adc	r24, r1
 1f4:	11 24       	eor	r1, r1
 1f6:	91 1d       	adc	r25, r1
 1f8:	08 95       	ret

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
