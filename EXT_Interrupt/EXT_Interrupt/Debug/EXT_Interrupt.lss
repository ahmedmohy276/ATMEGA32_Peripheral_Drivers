
EXT_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000576  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000005ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f36  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b7  00000000  00000000  0000166e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000987  00000000  00000000  00001e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  000027ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a1  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001072  00000000  00000000  00002f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004003  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_1>
   8:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_2>
   c:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <main>
  74:	0c 94 b9 02 	jmp	0x572	; 0x572 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_VoidSetPinDirection>:
#include "DIO_PRIVATE.h"
//#include <avr/io.h>

void DIO_VoidSetPinDirection(u8 pin_number,u8 port_number,u8 direction)
{
	switch(port_number)
  7c:	63 30       	cpi	r22, 0x03	; 3
  7e:	51 f1       	breq	.+84     	; 0xd4 <DIO_VoidSetPinDirection+0x58>
  80:	18 f4       	brcc	.+6      	; 0x88 <DIO_VoidSetPinDirection+0xc>
  82:	62 30       	cpi	r22, 0x02	; 2
  84:	41 f0       	breq	.+16     	; 0x96 <DIO_VoidSetPinDirection+0x1a>
  86:	08 95       	ret
  88:	64 30       	cpi	r22, 0x04	; 4
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_VoidSetPinDirection+0x12>
  8c:	42 c0       	rjmp	.+132    	; 0x112 <DIO_VoidSetPinDirection+0x96>
  8e:	65 30       	cpi	r22, 0x05	; 5
  90:	09 f4       	brne	.+2      	; 0x94 <DIO_VoidSetPinDirection+0x18>
  92:	5e c0       	rjmp	.+188    	; 0x150 <DIO_VoidSetPinDirection+0xd4>
  94:	08 95       	ret
	{
		case portA:
			if (direction==OUTPUT)
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	69 f4       	brne	.+26     	; 0xb4 <DIO_VoidSetPinDirection+0x38>
			{
				SET_Bit(DDRA_REG,pin_number);
  9a:	4a b3       	in	r20, 0x1a	; 26
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	b9 01       	movw	r22, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_VoidSetPinDirection+0x2c>
  a4:	66 0f       	add	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_VoidSetPinDirection+0x28>
  ac:	cb 01       	movw	r24, r22
  ae:	84 2b       	or	r24, r20
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
			}
			else if (direction==INPUT)
  b4:	41 11       	cpse	r20, r1
  b6:	6a c0       	rjmp	.+212    	; 0x18c <DIO_VoidSetPinDirection+0x110>
			{
				CLEAR_Bit(DDRA_REG,pin_number);
  b8:	4a b3       	in	r20, 0x1a	; 26
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	b9 01       	movw	r22, r18
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_VoidSetPinDirection+0x4a>
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_VoidSetPinDirection+0x46>
  ca:	cb 01       	movw	r24, r22
  cc:	80 95       	com	r24
  ce:	84 23       	and	r24, r20
  d0:	8a bb       	out	0x1a, r24	; 26
  d2:	08 95       	ret
			}
			break;
		case portB:
			if (direction==OUTPUT)
  d4:	41 30       	cpi	r20, 0x01	; 1
  d6:	69 f4       	brne	.+26     	; 0xf2 <DIO_VoidSetPinDirection+0x76>
			{
				SET_Bit(DDRB_REG,pin_number);
  d8:	47 b3       	in	r20, 0x17	; 23
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	b9 01       	movw	r22, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_VoidSetPinDirection+0x6a>
  e2:	66 0f       	add	r22, r22
  e4:	77 1f       	adc	r23, r23
  e6:	8a 95       	dec	r24
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_VoidSetPinDirection+0x66>
  ea:	cb 01       	movw	r24, r22
  ec:	84 2b       	or	r24, r20
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
			}
			else if (direction==INPUT)
  f2:	41 11       	cpse	r20, r1
  f4:	4b c0       	rjmp	.+150    	; 0x18c <DIO_VoidSetPinDirection+0x110>
			{
				CLEAR_Bit(DDRB_REG,pin_number);
  f6:	47 b3       	in	r20, 0x17	; 23
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_VoidSetPinDirection+0x88>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_VoidSetPinDirection+0x84>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	87 bb       	out	0x17, r24	; 23
 110:	08 95       	ret
			}
			break;
		case portC:
			if (direction==OUTPUT)
 112:	41 30       	cpi	r20, 0x01	; 1
 114:	69 f4       	brne	.+26     	; 0x130 <DIO_VoidSetPinDirection+0xb4>
			{
				SET_Bit(DDRC_REG,pin_number);
 116:	44 b3       	in	r20, 0x14	; 20
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_VoidSetPinDirection+0xa8>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	8a 95       	dec	r24
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_VoidSetPinDirection+0xa4>
 128:	cb 01       	movw	r24, r22
 12a:	84 2b       	or	r24, r20
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret
			}
			else if (direction==INPUT)
 130:	41 11       	cpse	r20, r1
 132:	2c c0       	rjmp	.+88     	; 0x18c <DIO_VoidSetPinDirection+0x110>
			{
				CLEAR_Bit(DDRC_REG,pin_number);
 134:	44 b3       	in	r20, 0x14	; 20
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	b9 01       	movw	r22, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_VoidSetPinDirection+0xc6>
 13e:	66 0f       	add	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	8a 95       	dec	r24
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_VoidSetPinDirection+0xc2>
 146:	cb 01       	movw	r24, r22
 148:	80 95       	com	r24
 14a:	84 23       	and	r24, r20
 14c:	84 bb       	out	0x14, r24	; 20
 14e:	08 95       	ret
			}
			break;
		case portD:
			if (direction==OUTPUT)
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	69 f4       	brne	.+26     	; 0x16e <DIO_VoidSetPinDirection+0xf2>
			{
				SET_Bit(DDRD_REG,pin_number);
 154:	41 b3       	in	r20, 0x11	; 17
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	b9 01       	movw	r22, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_VoidSetPinDirection+0xe6>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	8a 95       	dec	r24
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_VoidSetPinDirection+0xe2>
 166:	cb 01       	movw	r24, r22
 168:	84 2b       	or	r24, r20
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret
			}
			else if (direction==INPUT)
 16e:	41 11       	cpse	r20, r1
 170:	0d c0       	rjmp	.+26     	; 0x18c <DIO_VoidSetPinDirection+0x110>
			{
				CLEAR_Bit(DDRD_REG,pin_number);
 172:	41 b3       	in	r20, 0x11	; 17
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	b9 01       	movw	r22, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_VoidSetPinDirection+0x104>
 17c:	66 0f       	add	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	8a 95       	dec	r24
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_VoidSetPinDirection+0x100>
 184:	cb 01       	movw	r24, r22
 186:	80 95       	com	r24
 188:	84 23       	and	r24, r20
 18a:	81 bb       	out	0x11, r24	; 17
 18c:	08 95       	ret

0000018e <DIO_VoidSetPinValue>:
}


void DIO_VoidSetPinValue(u8 pin_number,u8 port_number,u8 value)
{
	switch(port_number)
 18e:	63 30       	cpi	r22, 0x03	; 3
 190:	51 f1       	breq	.+84     	; 0x1e6 <DIO_VoidSetPinValue+0x58>
 192:	18 f4       	brcc	.+6      	; 0x19a <DIO_VoidSetPinValue+0xc>
 194:	62 30       	cpi	r22, 0x02	; 2
 196:	41 f0       	breq	.+16     	; 0x1a8 <DIO_VoidSetPinValue+0x1a>
 198:	08 95       	ret
 19a:	64 30       	cpi	r22, 0x04	; 4
 19c:	09 f4       	brne	.+2      	; 0x1a0 <DIO_VoidSetPinValue+0x12>
 19e:	42 c0       	rjmp	.+132    	; 0x224 <DIO_VoidSetPinValue+0x96>
 1a0:	65 30       	cpi	r22, 0x05	; 5
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <DIO_VoidSetPinValue+0x18>
 1a4:	5e c0       	rjmp	.+188    	; 0x262 <DIO_VoidSetPinValue+0xd4>
 1a6:	08 95       	ret
	{
		case portA:
			if (value==HIGH)
 1a8:	41 30       	cpi	r20, 0x01	; 1
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <DIO_VoidSetPinValue+0x38>
			{
				SET_Bit(PORTA_REG,pin_number);
 1ac:	4b b3       	in	r20, 0x1b	; 27
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	b9 01       	movw	r22, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_VoidSetPinValue+0x2c>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	8a 95       	dec	r24
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_VoidSetPinValue+0x28>
 1be:	cb 01       	movw	r24, r22
 1c0:	84 2b       	or	r24, r20
 1c2:	8b bb       	out	0x1b, r24	; 27
 1c4:	08 95       	ret
			}
			else if (value==LOW)
 1c6:	41 11       	cpse	r20, r1
 1c8:	6a c0       	rjmp	.+212    	; 0x29e <DIO_VoidSetPinValue+0x110>
			{
				CLEAR_Bit(PORTA_REG,pin_number);
 1ca:	4b b3       	in	r20, 0x1b	; 27
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	b9 01       	movw	r22, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_VoidSetPinValue+0x4a>
 1d4:	66 0f       	add	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_VoidSetPinValue+0x46>
 1dc:	cb 01       	movw	r24, r22
 1de:	80 95       	com	r24
 1e0:	84 23       	and	r24, r20
 1e2:	8b bb       	out	0x1b, r24	; 27
 1e4:	08 95       	ret
			}
			break;
		case portB:
			if (value==HIGH)
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	69 f4       	brne	.+26     	; 0x204 <DIO_VoidSetPinValue+0x76>
			{
				SET_Bit(PORTB_REG,pin_number);
 1ea:	48 b3       	in	r20, 0x18	; 24
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	b9 01       	movw	r22, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_VoidSetPinValue+0x6a>
 1f4:	66 0f       	add	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	8a 95       	dec	r24
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_VoidSetPinValue+0x66>
 1fc:	cb 01       	movw	r24, r22
 1fe:	84 2b       	or	r24, r20
 200:	88 bb       	out	0x18, r24	; 24
 202:	08 95       	ret
			}
			else if (value==LOW)
 204:	41 11       	cpse	r20, r1
 206:	4b c0       	rjmp	.+150    	; 0x29e <DIO_VoidSetPinValue+0x110>
			{
				CLEAR_Bit(PORTB_REG,pin_number);
 208:	48 b3       	in	r20, 0x18	; 24
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	b9 01       	movw	r22, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_VoidSetPinValue+0x88>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_VoidSetPinValue+0x84>
 21a:	cb 01       	movw	r24, r22
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	88 bb       	out	0x18, r24	; 24
 222:	08 95       	ret
			}
			break;
		
		case portC:
			if (value==HIGH)
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	69 f4       	brne	.+26     	; 0x242 <DIO_VoidSetPinValue+0xb4>
			{
				SET_Bit(PORTC_REG,pin_number);
 228:	45 b3       	in	r20, 0x15	; 21
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_VoidSetPinValue+0xa8>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_VoidSetPinValue+0xa4>
 23a:	cb 01       	movw	r24, r22
 23c:	84 2b       	or	r24, r20
 23e:	85 bb       	out	0x15, r24	; 21
 240:	08 95       	ret
			}
			else if (value==LOW)
 242:	41 11       	cpse	r20, r1
 244:	2c c0       	rjmp	.+88     	; 0x29e <DIO_VoidSetPinValue+0x110>
			{
				CLEAR_Bit(PORTC_REG,pin_number);
 246:	45 b3       	in	r20, 0x15	; 21
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	b9 01       	movw	r22, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_VoidSetPinValue+0xc6>
 250:	66 0f       	add	r22, r22
 252:	77 1f       	adc	r23, r23
 254:	8a 95       	dec	r24
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_VoidSetPinValue+0xc2>
 258:	cb 01       	movw	r24, r22
 25a:	80 95       	com	r24
 25c:	84 23       	and	r24, r20
 25e:	85 bb       	out	0x15, r24	; 21
 260:	08 95       	ret
			}
			break;
		case portD:
			if (value==HIGH)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_VoidSetPinValue+0xf2>
			{
				SET_Bit(PORTD_REG,pin_number);
 266:	42 b3       	in	r20, 0x12	; 18
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	b9 01       	movw	r22, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_VoidSetPinValue+0xe6>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	8a 95       	dec	r24
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_VoidSetPinValue+0xe2>
 278:	cb 01       	movw	r24, r22
 27a:	84 2b       	or	r24, r20
 27c:	82 bb       	out	0x12, r24	; 18
 27e:	08 95       	ret
			}
			else if (value==LOW)
 280:	41 11       	cpse	r20, r1
 282:	0d c0       	rjmp	.+26     	; 0x29e <DIO_VoidSetPinValue+0x110>
			{
				CLEAR_Bit(PORTD_REG,pin_number);
 284:	42 b3       	in	r20, 0x12	; 18
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	b9 01       	movw	r22, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_VoidSetPinValue+0x104>
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_VoidSetPinValue+0x100>
 296:	cb 01       	movw	r24, r22
 298:	80 95       	com	r24
 29a:	84 23       	and	r24, r20
 29c:	82 bb       	out	0x12, r24	; 18
 29e:	08 95       	ret

000002a0 <Interrupt_VoidInterruptActivate>:
void (*INT2_ptr) (void);

void Interrupt_VoidInterruptActivate(u8 INT_Index,u8 INT_Type)
{
	/******glopal interrupt enable****/
	SREG_REG |=(1<<7);
 2a0:	9f b7       	in	r25, 0x3f	; 63
 2a2:	90 68       	ori	r25, 0x80	; 128
 2a4:	9f bf       	out	0x3f, r25	; 63
	
	switch(INT_Index)
 2a6:	85 30       	cpi	r24, 0x05	; 5
 2a8:	61 f1       	breq	.+88     	; 0x302 <Interrupt_VoidInterruptActivate+0x62>
 2aa:	86 30       	cpi	r24, 0x06	; 6
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <Interrupt_VoidInterruptActivate+0x10>
 2ae:	4f c0       	rjmp	.+158    	; 0x34e <Interrupt_VoidInterruptActivate+0xae>
 2b0:	84 30       	cpi	r24, 0x04	; 4
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <Interrupt_VoidInterruptActivate+0x16>
 2b4:	5a c0       	rjmp	.+180    	; 0x36a <Interrupt_VoidInterruptActivate+0xca>
	{
		case INT_0 :
			/***INT0 enable****/
			GICR_REG |=(1<<6);
 2b6:	8b b7       	in	r24, 0x3b	; 59
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	8b bf       	out	0x3b, r24	; 59
			if (INT_Type==LOW_LEVEL)
 2bc:	63 30       	cpi	r22, 0x03	; 3
 2be:	39 f4       	brne	.+14     	; 0x2ce <Interrupt_VoidInterruptActivate+0x2e>
			{
				CLEAR_Bit(MCUCR_REG,0);
 2c0:	85 b7       	in	r24, 0x35	; 53
 2c2:	8e 7f       	andi	r24, 0xFE	; 254
 2c4:	85 bf       	out	0x35, r24	; 53
				CLEAR_Bit(MCUCR_REG,1);
 2c6:	85 b7       	in	r24, 0x35	; 53
 2c8:	8d 7f       	andi	r24, 0xFD	; 253
 2ca:	85 bf       	out	0x35, r24	; 53
 2cc:	1a c0       	rjmp	.+52     	; 0x302 <Interrupt_VoidInterruptActivate+0x62>
			}
			else if (INT_Type==ANY_CHANGE)
 2ce:	62 30       	cpi	r22, 0x02	; 2
 2d0:	39 f4       	brne	.+14     	; 0x2e0 <Interrupt_VoidInterruptActivate+0x40>
			{
				SET_Bit(MCUCR_REG,0);
 2d2:	85 b7       	in	r24, 0x35	; 53
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	85 bf       	out	0x35, r24	; 53
				CLEAR_Bit(MCUCR_REG,1);
 2d8:	85 b7       	in	r24, 0x35	; 53
 2da:	8d 7f       	andi	r24, 0xFD	; 253
 2dc:	85 bf       	out	0x35, r24	; 53
 2de:	11 c0       	rjmp	.+34     	; 0x302 <Interrupt_VoidInterruptActivate+0x62>
			}
			else if (INT_Type==FALLING_EDGE)
 2e0:	61 11       	cpse	r22, r1
 2e2:	07 c0       	rjmp	.+14     	; 0x2f2 <Interrupt_VoidInterruptActivate+0x52>
			{
				SET_Bit(MCUCR_REG,1);
 2e4:	85 b7       	in	r24, 0x35	; 53
 2e6:	82 60       	ori	r24, 0x02	; 2
 2e8:	85 bf       	out	0x35, r24	; 53
				CLEAR_Bit(MCUCR_REG,0);
 2ea:	85 b7       	in	r24, 0x35	; 53
 2ec:	8e 7f       	andi	r24, 0xFE	; 254
 2ee:	85 bf       	out	0x35, r24	; 53
 2f0:	08 c0       	rjmp	.+16     	; 0x302 <Interrupt_VoidInterruptActivate+0x62>
			}
			else if (INT_Type==RISING_EDGE)
 2f2:	61 30       	cpi	r22, 0x01	; 1
 2f4:	31 f4       	brne	.+12     	; 0x302 <Interrupt_VoidInterruptActivate+0x62>
			{
				SET_Bit(MCUCR_REG,0);
 2f6:	85 b7       	in	r24, 0x35	; 53
 2f8:	81 60       	ori	r24, 0x01	; 1
 2fa:	85 bf       	out	0x35, r24	; 53
				SET_Bit(MCUCR_REG,1);
 2fc:	85 b7       	in	r24, 0x35	; 53
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	85 bf       	out	0x35, r24	; 53
			}
		case INT_1 :
			/***INT1 enable****/
			GICR_REG |=(1<<7);
 302:	8b b7       	in	r24, 0x3b	; 59
 304:	80 68       	ori	r24, 0x80	; 128
 306:	8b bf       	out	0x3b, r24	; 59
			if (INT_Type==LOW_LEVEL)
 308:	63 30       	cpi	r22, 0x03	; 3
 30a:	39 f4       	brne	.+14     	; 0x31a <Interrupt_VoidInterruptActivate+0x7a>
			{
				CLEAR_Bit(MCUCR_REG,2);
 30c:	85 b7       	in	r24, 0x35	; 53
 30e:	8b 7f       	andi	r24, 0xFB	; 251
 310:	85 bf       	out	0x35, r24	; 53
				CLEAR_Bit(MCUCR_REG,3);
 312:	85 b7       	in	r24, 0x35	; 53
 314:	87 7f       	andi	r24, 0xF7	; 247
 316:	85 bf       	out	0x35, r24	; 53
 318:	1a c0       	rjmp	.+52     	; 0x34e <Interrupt_VoidInterruptActivate+0xae>
			}
			else if (INT_Type==ANY_CHANGE)
 31a:	62 30       	cpi	r22, 0x02	; 2
 31c:	39 f4       	brne	.+14     	; 0x32c <Interrupt_VoidInterruptActivate+0x8c>
			{
				SET_Bit(MCUCR_REG,2);
 31e:	85 b7       	in	r24, 0x35	; 53
 320:	84 60       	ori	r24, 0x04	; 4
 322:	85 bf       	out	0x35, r24	; 53
				CLEAR_Bit(MCUCR_REG,3);
 324:	85 b7       	in	r24, 0x35	; 53
 326:	87 7f       	andi	r24, 0xF7	; 247
 328:	85 bf       	out	0x35, r24	; 53
 32a:	11 c0       	rjmp	.+34     	; 0x34e <Interrupt_VoidInterruptActivate+0xae>
			}
			else if (INT_Type==FALLING_EDGE)
 32c:	61 11       	cpse	r22, r1
 32e:	07 c0       	rjmp	.+14     	; 0x33e <Interrupt_VoidInterruptActivate+0x9e>
			{
				SET_Bit(MCUCR_REG,3);
 330:	85 b7       	in	r24, 0x35	; 53
 332:	88 60       	ori	r24, 0x08	; 8
 334:	85 bf       	out	0x35, r24	; 53
				CLEAR_Bit(MCUCR_REG,2);
 336:	85 b7       	in	r24, 0x35	; 53
 338:	8b 7f       	andi	r24, 0xFB	; 251
 33a:	85 bf       	out	0x35, r24	; 53
 33c:	08 c0       	rjmp	.+16     	; 0x34e <Interrupt_VoidInterruptActivate+0xae>
			}
			else if (INT_Type==RISING_EDGE)
 33e:	61 30       	cpi	r22, 0x01	; 1
 340:	31 f4       	brne	.+12     	; 0x34e <Interrupt_VoidInterruptActivate+0xae>
			{
				SET_Bit(MCUCR_REG,2);
 342:	85 b7       	in	r24, 0x35	; 53
 344:	84 60       	ori	r24, 0x04	; 4
 346:	85 bf       	out	0x35, r24	; 53
				SET_Bit(MCUCR_REG,3);
 348:	85 b7       	in	r24, 0x35	; 53
 34a:	88 60       	ori	r24, 0x08	; 8
 34c:	85 bf       	out	0x35, r24	; 53
			}
			
		case INT_2 :
			/***INT2 enable****/
			GICR_REG |=(1<<5);
 34e:	8b b7       	in	r24, 0x3b	; 59
 350:	80 62       	ori	r24, 0x20	; 32
 352:	8b bf       	out	0x3b, r24	; 59
			if (INT_Type==FALLING_EDGE)
 354:	61 11       	cpse	r22, r1
 356:	04 c0       	rjmp	.+8      	; 0x360 <Interrupt_VoidInterruptActivate+0xc0>
			{
				CLEAR_Bit(MCUCSR_REG,6);
 358:	84 b7       	in	r24, 0x34	; 52
 35a:	8f 7b       	andi	r24, 0xBF	; 191
 35c:	84 bf       	out	0x34, r24	; 52
 35e:	08 95       	ret
			}
			else if (INT_Type==RISING_EDGE)
 360:	61 30       	cpi	r22, 0x01	; 1
 362:	19 f4       	brne	.+6      	; 0x36a <Interrupt_VoidInterruptActivate+0xca>
			{
				SET_Bit(MCUCSR_REG,6);
 364:	84 b7       	in	r24, 0x34	; 52
 366:	80 64       	ori	r24, 0x40	; 64
 368:	84 bf       	out	0x34, r24	; 52
 36a:	08 95       	ret

0000036c <Interrupt_SetCallBackFunction>:
	}
}

void Interrupt_SetCallBackFunction(void (*ptrToFun) (void),u8 INT_index)
{
	switch(INT_index)
 36c:	65 30       	cpi	r22, 0x05	; 5
 36e:	41 f0       	breq	.+16     	; 0x380 <Interrupt_SetCallBackFunction+0x14>
 370:	66 30       	cpi	r22, 0x06	; 6
 372:	51 f0       	breq	.+20     	; 0x388 <Interrupt_SetCallBackFunction+0x1c>
 374:	64 30       	cpi	r22, 0x04	; 4
 376:	61 f4       	brne	.+24     	; 0x390 <Interrupt_SetCallBackFunction+0x24>
	{
		case INT_0 :
			INT0_ptr=ptrToFun;
 378:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 37c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		case INT_1 :
			INT1_ptr=ptrToFun;
 380:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <INT1_ptr+0x1>
 384:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <INT1_ptr>
		
		case INT_2 :
			INT2_ptr=ptrToFun;
 388:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <INT2_ptr+0x1>
 38c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <INT2_ptr>
 390:	08 95       	ret

00000392 <__vector_1>:
	}
}


ISR(INT0_vect)
{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	INT0_ptr();
 3b4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3b8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3bc:	09 95       	icall
}
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	7f 91       	pop	r23
 3cc:	6f 91       	pop	r22
 3ce:	5f 91       	pop	r21
 3d0:	4f 91       	pop	r20
 3d2:	3f 91       	pop	r19
 3d4:	2f 91       	pop	r18
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <__vector_2>:

ISR(INT1_vect)
{
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	2f 93       	push	r18
 3ec:	3f 93       	push	r19
 3ee:	4f 93       	push	r20
 3f0:	5f 93       	push	r21
 3f2:	6f 93       	push	r22
 3f4:	7f 93       	push	r23
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	af 93       	push	r26
 3fc:	bf 93       	push	r27
 3fe:	ef 93       	push	r30
 400:	ff 93       	push	r31
	INT1_ptr();
 402:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <INT1_ptr>
 406:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <INT1_ptr+0x1>
 40a:	09 95       	icall
}
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <__vector_3>:

ISR(INT2_vect)
{
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
 438:	2f 93       	push	r18
 43a:	3f 93       	push	r19
 43c:	4f 93       	push	r20
 43e:	5f 93       	push	r21
 440:	6f 93       	push	r22
 442:	7f 93       	push	r23
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
 448:	af 93       	push	r26
 44a:	bf 93       	push	r27
 44c:	ef 93       	push	r30
 44e:	ff 93       	push	r31
	INT2_ptr();
 450:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <INT2_ptr>
 454:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <INT2_ptr+0x1>
 458:	09 95       	icall
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <myfunc>:
    }
}

void myfunc(void)
{
	DIO_VoidSetPinValue(0,portC,HIGH);
 47c:	41 e0       	ldi	r20, 0x01	; 1
 47e:	64 e0       	ldi	r22, 0x04	; 4
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_VoidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 486:	2f e3       	ldi	r18, 0x3F	; 63
 488:	8d e0       	ldi	r24, 0x0D	; 13
 48a:	93 e0       	ldi	r25, 0x03	; 3
 48c:	21 50       	subi	r18, 0x01	; 1
 48e:	80 40       	sbci	r24, 0x00	; 0
 490:	90 40       	sbci	r25, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <myfunc+0x10>
 494:	00 c0       	rjmp	.+0      	; 0x496 <myfunc+0x1a>
 496:	00 00       	nop
	_delay_ms(1000);
	DIO_VoidSetPinValue(0,portC,LOW);
 498:	40 e0       	ldi	r20, 0x00	; 0
 49a:	64 e0       	ldi	r22, 0x04	; 4
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_VoidSetPinValue>
 4a2:	08 95       	ret

000004a4 <myfunc1>:
}

void myfunc1(void)
{
	DIO_VoidSetPinValue(0,portC,HIGH);
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	64 e0       	ldi	r22, 0x04	; 4
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_VoidSetPinValue>
 4ae:	2f e7       	ldi	r18, 0x7F	; 127
 4b0:	8a e1       	ldi	r24, 0x1A	; 26
 4b2:	96 e0       	ldi	r25, 0x06	; 6
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	80 40       	sbci	r24, 0x00	; 0
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <myfunc1+0x10>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <myfunc1+0x1a>
 4be:	00 00       	nop
	_delay_ms(2000);
	DIO_VoidSetPinValue(0,portC,LOW);
 4c0:	40 e0       	ldi	r20, 0x00	; 0
 4c2:	64 e0       	ldi	r22, 0x04	; 4
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_VoidSetPinValue>
 4ca:	08 95       	ret

000004cc <myfunc2>:
}


void myfunc2(void)
{
	DIO_VoidSetPinValue(0,portC,HIGH);
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	64 e0       	ldi	r22, 0x04	; 4
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_VoidSetPinValue>
 4d6:	2f eb       	ldi	r18, 0xBF	; 191
 4d8:	87 e2       	ldi	r24, 0x27	; 39
 4da:	99 e0       	ldi	r25, 0x09	; 9
 4dc:	21 50       	subi	r18, 0x01	; 1
 4de:	80 40       	sbci	r24, 0x00	; 0
 4e0:	90 40       	sbci	r25, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <myfunc2+0x10>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <myfunc2+0x1a>
 4e6:	00 00       	nop
	_delay_ms(3000);
	DIO_VoidSetPinValue(0,portC,LOW);
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	64 e0       	ldi	r22, 0x04	; 4
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_VoidSetPinValue>
 4f2:	08 95       	ret

000004f4 <main>:

int main(void)
{
    /* Replace with your application code */
	
	DIO_VoidSetPinDirection(2,portB,INPUT);
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	63 e0       	ldi	r22, 0x03	; 3
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinValue(2,portB,HIGH);
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	63 e0       	ldi	r22, 0x03	; 3
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_VoidSetPinValue>
	
	DIO_VoidSetPinDirection(2,portD,INPUT);
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	65 e0       	ldi	r22, 0x05	; 5
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinValue(2,portD,HIGH);
 512:	41 e0       	ldi	r20, 0x01	; 1
 514:	65 e0       	ldi	r22, 0x05	; 5
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_VoidSetPinValue>
	
	DIO_VoidSetPinDirection(3,portD,INPUT);
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	65 e0       	ldi	r22, 0x05	; 5
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinValue(3,portD,HIGH);
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	65 e0       	ldi	r22, 0x05	; 5
 52a:	83 e0       	ldi	r24, 0x03	; 3
 52c:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_VoidSetPinValue>
	
	Interrupt_VoidInterruptActivate(INT_0,FALLING_EDGE);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	84 e0       	ldi	r24, 0x04	; 4
 534:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Interrupt_VoidInterruptActivate>
	Interrupt_VoidInterruptActivate(INT_1,FALLING_EDGE);
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	85 e0       	ldi	r24, 0x05	; 5
 53c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Interrupt_VoidInterruptActivate>
	Interrupt_VoidInterruptActivate(INT_2,FALLING_EDGE);
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	86 e0       	ldi	r24, 0x06	; 6
 544:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Interrupt_VoidInterruptActivate>
	
	DIO_VoidSetPinDirection(0,portC,OUTPUT);
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	64 e0       	ldi	r22, 0x04	; 4
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_VoidSetPinDirection>
	Interrupt_SetCallBackFunction(myfunc,INT_0);
 552:	64 e0       	ldi	r22, 0x04	; 4
 554:	8e e3       	ldi	r24, 0x3E	; 62
 556:	92 e0       	ldi	r25, 0x02	; 2
 558:	0e 94 b6 01 	call	0x36c	; 0x36c <Interrupt_SetCallBackFunction>
	Interrupt_SetCallBackFunction(myfunc1,INT_1);
 55c:	65 e0       	ldi	r22, 0x05	; 5
 55e:	82 e5       	ldi	r24, 0x52	; 82
 560:	92 e0       	ldi	r25, 0x02	; 2
 562:	0e 94 b6 01 	call	0x36c	; 0x36c <Interrupt_SetCallBackFunction>
	Interrupt_SetCallBackFunction(myfunc2,INT_2);
 566:	66 e0       	ldi	r22, 0x06	; 6
 568:	86 e6       	ldi	r24, 0x66	; 102
 56a:	92 e0       	ldi	r25, 0x02	; 2
 56c:	0e 94 b6 01 	call	0x36c	; 0x36c <Interrupt_SetCallBackFunction>
 570:	ff cf       	rjmp	.-2      	; 0x570 <main+0x7c>

00000572 <_exit>:
 572:	f8 94       	cli

00000574 <__stop_program>:
 574:	ff cf       	rjmp	.-2      	; 0x574 <__stop_program>
