
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000532  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b8e  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f6  00000000  00000000  0000120a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073b  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  0000203c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048d  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d60  00000000  00000000  000025a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00003301  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 02 	call	0x4ba	; 0x4ba <main>
  64:	0c 94 97 02 	jmp	0x52e	; 0x52e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_VoidSetPinDirection>:
#include "DIO_PRIVATE.h"
//#include <avr/io.h>

void DIO_VoidSetPinDirection(u8 pin_number,u8 port_number,u8 direction)
{
	switch(port_number)
  6c:	63 30       	cpi	r22, 0x03	; 3
  6e:	51 f1       	breq	.+84     	; 0xc4 <DIO_VoidSetPinDirection+0x58>
  70:	18 f4       	brcc	.+6      	; 0x78 <DIO_VoidSetPinDirection+0xc>
  72:	62 30       	cpi	r22, 0x02	; 2
  74:	41 f0       	breq	.+16     	; 0x86 <DIO_VoidSetPinDirection+0x1a>
  76:	08 95       	ret
  78:	64 30       	cpi	r22, 0x04	; 4
  7a:	09 f4       	brne	.+2      	; 0x7e <DIO_VoidSetPinDirection+0x12>
  7c:	42 c0       	rjmp	.+132    	; 0x102 <DIO_VoidSetPinDirection+0x96>
  7e:	65 30       	cpi	r22, 0x05	; 5
  80:	09 f4       	brne	.+2      	; 0x84 <DIO_VoidSetPinDirection+0x18>
  82:	5e c0       	rjmp	.+188    	; 0x140 <DIO_VoidSetPinDirection+0xd4>
  84:	08 95       	ret
	{
		case portA:
			if (direction==OUTPUT)
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	69 f4       	brne	.+26     	; 0xa4 <DIO_VoidSetPinDirection+0x38>
			{
				SET_Bit(DDRA_REG,pin_number);
  8a:	4a b3       	in	r20, 0x1a	; 26
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	b9 01       	movw	r22, r18
  92:	02 c0       	rjmp	.+4      	; 0x98 <DIO_VoidSetPinDirection+0x2c>
  94:	66 0f       	add	r22, r22
  96:	77 1f       	adc	r23, r23
  98:	8a 95       	dec	r24
  9a:	e2 f7       	brpl	.-8      	; 0x94 <DIO_VoidSetPinDirection+0x28>
  9c:	cb 01       	movw	r24, r22
  9e:	84 2b       	or	r24, r20
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	08 95       	ret
			}
			else if (direction==INPUT)
  a4:	41 11       	cpse	r20, r1
  a6:	6a c0       	rjmp	.+212    	; 0x17c <DIO_VoidSetPinDirection+0x110>
			{
				CLEAR_Bit(DDRA_REG,pin_number);
  a8:	4a b3       	in	r20, 0x1a	; 26
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	b9 01       	movw	r22, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_VoidSetPinDirection+0x4a>
  b2:	66 0f       	add	r22, r22
  b4:	77 1f       	adc	r23, r23
  b6:	8a 95       	dec	r24
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_VoidSetPinDirection+0x46>
  ba:	cb 01       	movw	r24, r22
  bc:	80 95       	com	r24
  be:	84 23       	and	r24, r20
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
			}
			break;
		case portB:
			if (direction==OUTPUT)
  c4:	41 30       	cpi	r20, 0x01	; 1
  c6:	69 f4       	brne	.+26     	; 0xe2 <DIO_VoidSetPinDirection+0x76>
			{
				SET_Bit(DDRB_REG,pin_number);
  c8:	47 b3       	in	r20, 0x17	; 23
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	b9 01       	movw	r22, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_VoidSetPinDirection+0x6a>
  d2:	66 0f       	add	r22, r22
  d4:	77 1f       	adc	r23, r23
  d6:	8a 95       	dec	r24
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_VoidSetPinDirection+0x66>
  da:	cb 01       	movw	r24, r22
  dc:	84 2b       	or	r24, r20
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
			}
			else if (direction==INPUT)
  e2:	41 11       	cpse	r20, r1
  e4:	4b c0       	rjmp	.+150    	; 0x17c <DIO_VoidSetPinDirection+0x110>
			{
				CLEAR_Bit(DDRB_REG,pin_number);
  e6:	47 b3       	in	r20, 0x17	; 23
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	b9 01       	movw	r22, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_VoidSetPinDirection+0x88>
  f0:	66 0f       	add	r22, r22
  f2:	77 1f       	adc	r23, r23
  f4:	8a 95       	dec	r24
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_VoidSetPinDirection+0x84>
  f8:	cb 01       	movw	r24, r22
  fa:	80 95       	com	r24
  fc:	84 23       	and	r24, r20
  fe:	87 bb       	out	0x17, r24	; 23
 100:	08 95       	ret
			}
			break;
		case portC:
			if (direction==OUTPUT)
 102:	41 30       	cpi	r20, 0x01	; 1
 104:	69 f4       	brne	.+26     	; 0x120 <DIO_VoidSetPinDirection+0xb4>
			{
				SET_Bit(DDRC_REG,pin_number);
 106:	44 b3       	in	r20, 0x14	; 20
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_VoidSetPinDirection+0xa8>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_VoidSetPinDirection+0xa4>
 118:	cb 01       	movw	r24, r22
 11a:	84 2b       	or	r24, r20
 11c:	84 bb       	out	0x14, r24	; 20
 11e:	08 95       	ret
			}
			else if (direction==INPUT)
 120:	41 11       	cpse	r20, r1
 122:	2c c0       	rjmp	.+88     	; 0x17c <DIO_VoidSetPinDirection+0x110>
			{
				CLEAR_Bit(DDRC_REG,pin_number);
 124:	44 b3       	in	r20, 0x14	; 20
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_VoidSetPinDirection+0xc6>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_VoidSetPinDirection+0xc2>
 136:	cb 01       	movw	r24, r22
 138:	80 95       	com	r24
 13a:	84 23       	and	r24, r20
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
			}
			break;
		case portD:
			if (direction==OUTPUT)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_VoidSetPinDirection+0xf2>
			{
				SET_Bit(DDRD_REG,pin_number);
 144:	41 b3       	in	r20, 0x11	; 17
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	b9 01       	movw	r22, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_VoidSetPinDirection+0xe6>
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	8a 95       	dec	r24
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_VoidSetPinDirection+0xe2>
 156:	cb 01       	movw	r24, r22
 158:	84 2b       	or	r24, r20
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret
			}
			else if (direction==INPUT)
 15e:	41 11       	cpse	r20, r1
 160:	0d c0       	rjmp	.+26     	; 0x17c <DIO_VoidSetPinDirection+0x110>
			{
				CLEAR_Bit(DDRD_REG,pin_number);
 162:	41 b3       	in	r20, 0x11	; 17
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	b9 01       	movw	r22, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_VoidSetPinDirection+0x104>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	8a 95       	dec	r24
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_VoidSetPinDirection+0x100>
 174:	cb 01       	movw	r24, r22
 176:	80 95       	com	r24
 178:	84 23       	and	r24, r20
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <DIO_VoidSetPinValue>:
}


void DIO_VoidSetPinValue(u8 pin_number,u8 port_number,u8 value)
{
	switch(port_number)
 17e:	63 30       	cpi	r22, 0x03	; 3
 180:	51 f1       	breq	.+84     	; 0x1d6 <DIO_VoidSetPinValue+0x58>
 182:	18 f4       	brcc	.+6      	; 0x18a <DIO_VoidSetPinValue+0xc>
 184:	62 30       	cpi	r22, 0x02	; 2
 186:	41 f0       	breq	.+16     	; 0x198 <DIO_VoidSetPinValue+0x1a>
 188:	08 95       	ret
 18a:	64 30       	cpi	r22, 0x04	; 4
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_VoidSetPinValue+0x12>
 18e:	42 c0       	rjmp	.+132    	; 0x214 <DIO_VoidSetPinValue+0x96>
 190:	65 30       	cpi	r22, 0x05	; 5
 192:	09 f4       	brne	.+2      	; 0x196 <DIO_VoidSetPinValue+0x18>
 194:	5e c0       	rjmp	.+188    	; 0x252 <DIO_VoidSetPinValue+0xd4>
 196:	08 95       	ret
	{
		case portA:
			if (value==HIGH)
 198:	41 30       	cpi	r20, 0x01	; 1
 19a:	69 f4       	brne	.+26     	; 0x1b6 <DIO_VoidSetPinValue+0x38>
			{
				SET_Bit(PORTA_REG,pin_number);
 19c:	4b b3       	in	r20, 0x1b	; 27
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	b9 01       	movw	r22, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_VoidSetPinValue+0x2c>
 1a6:	66 0f       	add	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	8a 95       	dec	r24
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_VoidSetPinValue+0x28>
 1ae:	cb 01       	movw	r24, r22
 1b0:	84 2b       	or	r24, r20
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	08 95       	ret
			}
			else if (value==LOW)
 1b6:	41 11       	cpse	r20, r1
 1b8:	6a c0       	rjmp	.+212    	; 0x28e <DIO_VoidSetPinValue+0x110>
			{
				CLEAR_Bit(PORTA_REG,pin_number);
 1ba:	4b b3       	in	r20, 0x1b	; 27
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	b9 01       	movw	r22, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_VoidSetPinValue+0x4a>
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	8a 95       	dec	r24
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_VoidSetPinValue+0x46>
 1cc:	cb 01       	movw	r24, r22
 1ce:	80 95       	com	r24
 1d0:	84 23       	and	r24, r20
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	08 95       	ret
			}
			break;
		case portB:
			if (value==HIGH)
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	69 f4       	brne	.+26     	; 0x1f4 <DIO_VoidSetPinValue+0x76>
			{
				SET_Bit(PORTB_REG,pin_number);
 1da:	48 b3       	in	r20, 0x18	; 24
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_VoidSetPinValue+0x6a>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	8a 95       	dec	r24
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_VoidSetPinValue+0x66>
 1ec:	cb 01       	movw	r24, r22
 1ee:	84 2b       	or	r24, r20
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	08 95       	ret
			}
			else if (value==LOW)
 1f4:	41 11       	cpse	r20, r1
 1f6:	4b c0       	rjmp	.+150    	; 0x28e <DIO_VoidSetPinValue+0x110>
			{
				CLEAR_Bit(PORTB_REG,pin_number);
 1f8:	48 b3       	in	r20, 0x18	; 24
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	b9 01       	movw	r22, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_VoidSetPinValue+0x88>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	8a 95       	dec	r24
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_VoidSetPinValue+0x84>
 20a:	cb 01       	movw	r24, r22
 20c:	80 95       	com	r24
 20e:	84 23       	and	r24, r20
 210:	88 bb       	out	0x18, r24	; 24
 212:	08 95       	ret
			}
			break;
		
		case portC:
			if (value==HIGH)
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	69 f4       	brne	.+26     	; 0x232 <DIO_VoidSetPinValue+0xb4>
			{
				SET_Bit(PORTC_REG,pin_number);
 218:	45 b3       	in	r20, 0x15	; 21
 21a:	21 e0       	ldi	r18, 0x01	; 1
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	b9 01       	movw	r22, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_VoidSetPinValue+0xa8>
 222:	66 0f       	add	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	8a 95       	dec	r24
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_VoidSetPinValue+0xa4>
 22a:	cb 01       	movw	r24, r22
 22c:	84 2b       	or	r24, r20
 22e:	85 bb       	out	0x15, r24	; 21
 230:	08 95       	ret
			}
			else if (value==LOW)
 232:	41 11       	cpse	r20, r1
 234:	2c c0       	rjmp	.+88     	; 0x28e <DIO_VoidSetPinValue+0x110>
			{
				CLEAR_Bit(PORTC_REG,pin_number);
 236:	45 b3       	in	r20, 0x15	; 21
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	b9 01       	movw	r22, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_VoidSetPinValue+0xc6>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	8a 95       	dec	r24
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_VoidSetPinValue+0xc2>
 248:	cb 01       	movw	r24, r22
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	85 bb       	out	0x15, r24	; 21
 250:	08 95       	ret
			}
			break;
		case portD:
			if (value==HIGH)
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	69 f4       	brne	.+26     	; 0x270 <DIO_VoidSetPinValue+0xf2>
			{
				SET_Bit(PORTD_REG,pin_number);
 256:	42 b3       	in	r20, 0x12	; 18
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	b9 01       	movw	r22, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_VoidSetPinValue+0xe6>
 260:	66 0f       	add	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	8a 95       	dec	r24
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_VoidSetPinValue+0xe2>
 268:	cb 01       	movw	r24, r22
 26a:	84 2b       	or	r24, r20
 26c:	82 bb       	out	0x12, r24	; 18
 26e:	08 95       	ret
			}
			else if (value==LOW)
 270:	41 11       	cpse	r20, r1
 272:	0d c0       	rjmp	.+26     	; 0x28e <DIO_VoidSetPinValue+0x110>
			{
				CLEAR_Bit(PORTD_REG,pin_number);
 274:	42 b3       	in	r20, 0x12	; 18
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	b9 01       	movw	r22, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_VoidSetPinValue+0x104>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	8a 95       	dec	r24
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_VoidSetPinValue+0x100>
 286:	cb 01       	movw	r24, r22
 288:	80 95       	com	r24
 28a:	84 23       	and	r24, r20
 28c:	82 bb       	out	0x12, r24	; 18
 28e:	08 95       	ret

00000290 <DIO_VoidSetPortDirection>:


void DIO_VoidSetPortDirection(u8 port_number,u8 direction)
{
	u8 pinnumber=8;
	switch(port_number)
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	d1 f1       	breq	.+116    	; 0x308 <DIO_VoidSetPortDirection+0x78>
 294:	18 f4       	brcc	.+6      	; 0x29c <DIO_VoidSetPortDirection+0xc>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	41 f0       	breq	.+16     	; 0x2aa <DIO_VoidSetPortDirection+0x1a>
 29a:	08 95       	ret
 29c:	84 30       	cpi	r24, 0x04	; 4
 29e:	09 f4       	brne	.+2      	; 0x2a2 <DIO_VoidSetPortDirection+0x12>
 2a0:	62 c0       	rjmp	.+196    	; 0x366 <DIO_VoidSetPortDirection+0xd6>
 2a2:	85 30       	cpi	r24, 0x05	; 5
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <DIO_VoidSetPortDirection+0x18>
 2a6:	8e c0       	rjmp	.+284    	; 0x3c4 <DIO_VoidSetPortDirection+0x134>
 2a8:	08 95       	ret
	{
		case portA:
			if (direction==OUTPUT)
 2aa:	61 30       	cpi	r22, 0x01	; 1
 2ac:	a9 f4       	brne	.+42     	; 0x2d8 <DIO_VoidSetPortDirection+0x48>
 2ae:	0e c0       	rjmp	.+28     	; 0x2cc <DIO_VoidSetPortDirection+0x3c>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRA_REG,i);
 2b0:	4a b3       	in	r20, 0x1a	; 26
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 2e       	mov	r0, r18
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_VoidSetPortDirection+0x2e>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_VoidSetPortDirection+0x2a>
 2c2:	84 2b       	or	r24, r20
 2c4:	8a bb       	out	0x1a, r24	; 26
	switch(port_number)
	{
		case portA:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 2c6:	2f 5f       	subi	r18, 0xFF	; 255
 2c8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_VoidSetPortDirection+0x40>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	28 30       	cpi	r18, 0x08	; 8
 2d2:	31 05       	cpc	r19, r1
 2d4:	68 f3       	brcs	.-38     	; 0x2b0 <DIO_VoidSetPortDirection+0x20>
 2d6:	08 95       	ret
				{
					SET_Bit(DDRA_REG,i);
				}
			}
			else if (direction==INPUT)
 2d8:	66 23       	and	r22, r22
 2da:	81 f0       	breq	.+32     	; 0x2fc <DIO_VoidSetPortDirection+0x6c>
 2dc:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRA_REG,i);
 2de:	4a b3       	in	r20, 0x1a	; 26
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 2e       	mov	r0, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_VoidSetPortDirection+0x5c>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_VoidSetPortDirection+0x58>
 2f0:	80 95       	com	r24
 2f2:	84 23       	and	r24, r20
 2f4:	8a bb       	out	0x1a, r24	; 26
					SET_Bit(DDRA_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 2f6:	2f 5f       	subi	r18, 0xFF	; 255
 2f8:	3f 4f       	sbci	r19, 0xFF	; 255
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_VoidSetPortDirection+0x70>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	28 30       	cpi	r18, 0x08	; 8
 302:	31 05       	cpc	r19, r1
 304:	60 f3       	brcs	.-40     	; 0x2de <DIO_VoidSetPortDirection+0x4e>
 306:	08 95       	ret
					CLEAR_Bit(DDRA_REG,i);
				}
			}
		break;
		case portB:
			if (direction==OUTPUT)
 308:	61 30       	cpi	r22, 0x01	; 1
 30a:	a9 f4       	brne	.+42     	; 0x336 <DIO_VoidSetPortDirection+0xa6>
 30c:	0e c0       	rjmp	.+28     	; 0x32a <DIO_VoidSetPortDirection+0x9a>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRB_REG,i);
 30e:	47 b3       	in	r20, 0x17	; 23
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 2e       	mov	r0, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_VoidSetPortDirection+0x8c>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_VoidSetPortDirection+0x88>
 320:	84 2b       	or	r24, r20
 322:	87 bb       	out	0x17, r24	; 23
			}
		break;
		case portB:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 324:	2f 5f       	subi	r18, 0xFF	; 255
 326:	3f 4f       	sbci	r19, 0xFF	; 255
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_VoidSetPortDirection+0x9e>
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	28 30       	cpi	r18, 0x08	; 8
 330:	31 05       	cpc	r19, r1
 332:	68 f3       	brcs	.-38     	; 0x30e <DIO_VoidSetPortDirection+0x7e>
 334:	08 95       	ret
				{
					SET_Bit(DDRB_REG,i);
				}
			}
			else if (direction==INPUT)
 336:	66 23       	and	r22, r22
 338:	81 f0       	breq	.+32     	; 0x35a <DIO_VoidSetPortDirection+0xca>
 33a:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRB_REG,i);
 33c:	47 b3       	in	r20, 0x17	; 23
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 2e       	mov	r0, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_VoidSetPortDirection+0xba>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_VoidSetPortDirection+0xb6>
 34e:	80 95       	com	r24
 350:	84 23       	and	r24, r20
 352:	87 bb       	out	0x17, r24	; 23
					SET_Bit(DDRB_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 354:	2f 5f       	subi	r18, 0xFF	; 255
 356:	3f 4f       	sbci	r19, 0xFF	; 255
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_VoidSetPortDirection+0xce>
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	28 30       	cpi	r18, 0x08	; 8
 360:	31 05       	cpc	r19, r1
 362:	60 f3       	brcs	.-40     	; 0x33c <DIO_VoidSetPortDirection+0xac>
 364:	08 95       	ret
					CLEAR_Bit(DDRB_REG,i);
				}
			}
			break;
		case portC:
			if (direction==OUTPUT)
 366:	61 30       	cpi	r22, 0x01	; 1
 368:	a9 f4       	brne	.+42     	; 0x394 <DIO_VoidSetPortDirection+0x104>
 36a:	0e c0       	rjmp	.+28     	; 0x388 <DIO_VoidSetPortDirection+0xf8>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRC_REG,i);
 36c:	44 b3       	in	r20, 0x14	; 20
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 2e       	mov	r0, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_VoidSetPortDirection+0xea>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_VoidSetPortDirection+0xe6>
 37e:	84 2b       	or	r24, r20
 380:	84 bb       	out	0x14, r24	; 20
			}
			break;
		case portC:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 382:	2f 5f       	subi	r18, 0xFF	; 255
 384:	3f 4f       	sbci	r19, 0xFF	; 255
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_VoidSetPortDirection+0xfc>
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	28 30       	cpi	r18, 0x08	; 8
 38e:	31 05       	cpc	r19, r1
 390:	68 f3       	brcs	.-38     	; 0x36c <DIO_VoidSetPortDirection+0xdc>
 392:	08 95       	ret
				{
					SET_Bit(DDRC_REG,i);
				}
			}
			else if (direction==INPUT)
 394:	66 23       	and	r22, r22
 396:	81 f0       	breq	.+32     	; 0x3b8 <DIO_VoidSetPortDirection+0x128>
 398:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRC_REG,i);
 39a:	44 b3       	in	r20, 0x14	; 20
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 2e       	mov	r0, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_VoidSetPortDirection+0x118>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	0a 94       	dec	r0
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_VoidSetPortDirection+0x114>
 3ac:	80 95       	com	r24
 3ae:	84 23       	and	r24, r20
 3b0:	84 bb       	out	0x14, r24	; 20
					SET_Bit(DDRC_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 3b2:	2f 5f       	subi	r18, 0xFF	; 255
 3b4:	3f 4f       	sbci	r19, 0xFF	; 255
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_VoidSetPortDirection+0x12c>
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	28 30       	cpi	r18, 0x08	; 8
 3be:	31 05       	cpc	r19, r1
 3c0:	60 f3       	brcs	.-40     	; 0x39a <DIO_VoidSetPortDirection+0x10a>
 3c2:	08 95       	ret
					CLEAR_Bit(DDRC_REG,i);
				}
			}
			break;
		case portD:
			if (direction==OUTPUT)
 3c4:	61 30       	cpi	r22, 0x01	; 1
 3c6:	a9 f4       	brne	.+42     	; 0x3f2 <DIO_VoidSetPortDirection+0x162>
 3c8:	0e c0       	rjmp	.+28     	; 0x3e6 <DIO_VoidSetPortDirection+0x156>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRD_REG,i);
 3ca:	41 b3       	in	r20, 0x11	; 17
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 2e       	mov	r0, r18
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_VoidSetPortDirection+0x148>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_VoidSetPortDirection+0x144>
 3dc:	84 2b       	or	r24, r20
 3de:	81 bb       	out	0x11, r24	; 17
			}
			break;
		case portD:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 3e0:	2f 5f       	subi	r18, 0xFF	; 255
 3e2:	3f 4f       	sbci	r19, 0xFF	; 255
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_VoidSetPortDirection+0x15a>
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	28 30       	cpi	r18, 0x08	; 8
 3ec:	31 05       	cpc	r19, r1
 3ee:	68 f3       	brcs	.-38     	; 0x3ca <DIO_VoidSetPortDirection+0x13a>
 3f0:	08 95       	ret
				{
					SET_Bit(DDRD_REG,i);
				}
			}
			else if (direction==INPUT)
 3f2:	66 23       	and	r22, r22
 3f4:	81 f0       	breq	.+32     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3f6:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRD_REG,i);
 3f8:	41 b3       	in	r20, 0x11	; 17
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 2e       	mov	r0, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	80 95       	com	r24
 40c:	84 23       	and	r24, r20
 40e:	81 bb       	out	0x11, r24	; 17
					SET_Bit(DDRD_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	20 e0       	ldi	r18, 0x00	; 0
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	28 30       	cpi	r18, 0x08	; 8
 41c:	31 05       	cpc	r19, r1
 41e:	60 f3       	brcs	.-40     	; 0x3f8 <DIO_VoidSetPortDirection+0x168>
 420:	08 95       	ret

00000422 <DIO_VoidSetPortValue>:
}


void DIO_VoidSetPortValue(u8 port_number,u8 value)
{
	switch(port_number)
 422:	83 30       	cpi	r24, 0x03	; 3
 424:	59 f0       	breq	.+22     	; 0x43c <DIO_VoidSetPortValue+0x1a>
 426:	18 f4       	brcc	.+6      	; 0x42e <DIO_VoidSetPortValue+0xc>
 428:	82 30       	cpi	r24, 0x02	; 2
 42a:	31 f0       	breq	.+12     	; 0x438 <DIO_VoidSetPortValue+0x16>
 42c:	08 95       	ret
 42e:	84 30       	cpi	r24, 0x04	; 4
 430:	39 f0       	breq	.+14     	; 0x440 <DIO_VoidSetPortValue+0x1e>
 432:	85 30       	cpi	r24, 0x05	; 5
 434:	39 f0       	breq	.+14     	; 0x444 <DIO_VoidSetPortValue+0x22>
 436:	08 95       	ret
	{
		case portA:
			PORTA_REG =value;
 438:	6b bb       	out	0x1b, r22	; 27
			break;
 43a:	08 95       	ret
		case portB:
			PORTB_REG =value;
 43c:	68 bb       	out	0x18, r22	; 24
			break;
 43e:	08 95       	ret
		case portC:
			PORTC_REG =value;
 440:	65 bb       	out	0x15, r22	; 21
			break;
 442:	08 95       	ret
		case portD:
			PORTD_REG =value;
 444:	62 bb       	out	0x12, r22	; 18
 446:	08 95       	ret

00000448 <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(u8 pin_number,u8 port_number)
{
	u8 pinvalue=0;

	switch(port_number)
 448:	63 30       	cpi	r22, 0x03	; 3
 44a:	a1 f0       	breq	.+40     	; 0x474 <DIO_U8GetPinValue+0x2c>
 44c:	18 f4       	brcc	.+6      	; 0x454 <DIO_U8GetPinValue+0xc>
 44e:	62 30       	cpi	r22, 0x02	; 2
 450:	31 f0       	breq	.+12     	; 0x45e <DIO_U8GetPinValue+0x16>
 452:	31 c0       	rjmp	.+98     	; 0x4b6 <DIO_U8GetPinValue+0x6e>
 454:	64 30       	cpi	r22, 0x04	; 4
 456:	c9 f0       	breq	.+50     	; 0x48a <DIO_U8GetPinValue+0x42>
 458:	65 30       	cpi	r22, 0x05	; 5
 45a:	11 f1       	breq	.+68     	; 0x4a0 <DIO_U8GetPinValue+0x58>
 45c:	2c c0       	rjmp	.+88     	; 0x4b6 <DIO_U8GetPinValue+0x6e>
	{
		case portA:
			pinvalue = GET_Bit(PINA_REG,pin_number);
 45e:	29 b3       	in	r18, 0x19	; 25
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	a9 01       	movw	r20, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_U8GetPinValue+0x22>
 466:	55 95       	asr	r21
 468:	47 95       	ror	r20
 46a:	8a 95       	dec	r24
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_U8GetPinValue+0x1e>
 46e:	ca 01       	movw	r24, r20
 470:	81 70       	andi	r24, 0x01	; 1
			break;
 472:	08 95       	ret
			
		case portB:
			pinvalue = GET_Bit(PINB_REG,pin_number);
 474:	26 b3       	in	r18, 0x16	; 22
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	a9 01       	movw	r20, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_U8GetPinValue+0x38>
 47c:	55 95       	asr	r21
 47e:	47 95       	ror	r20
 480:	8a 95       	dec	r24
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_U8GetPinValue+0x34>
 484:	ca 01       	movw	r24, r20
 486:	81 70       	andi	r24, 0x01	; 1
			break;
 488:	08 95       	ret
			
		case portC:
			pinvalue = GET_Bit(PINC_REG,pin_number);			
 48a:	23 b3       	in	r18, 0x13	; 19
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	a9 01       	movw	r20, r18
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_U8GetPinValue+0x4e>
 492:	55 95       	asr	r21
 494:	47 95       	ror	r20
 496:	8a 95       	dec	r24
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_U8GetPinValue+0x4a>
 49a:	ca 01       	movw	r24, r20
 49c:	81 70       	andi	r24, 0x01	; 1
			break;
 49e:	08 95       	ret
			
		case portD:
			pinvalue = GET_Bit(PIND_REG,pin_number);
 4a0:	20 b3       	in	r18, 0x10	; 16
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	a9 01       	movw	r20, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_U8GetPinValue+0x64>
 4a8:	55 95       	asr	r21
 4aa:	47 95       	ror	r20
 4ac:	8a 95       	dec	r24
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_U8GetPinValue+0x60>
 4b0:	ca 01       	movw	r24, r20
 4b2:	81 70       	andi	r24, 0x01	; 1
			break;
 4b4:	08 95       	ret
}


u8 DIO_U8GetPinValue(u8 pin_number,u8 port_number)
{
	u8 pinvalue=0;
 4b6:	80 e0       	ldi	r24, 0x00	; 0
			pinvalue = GET_Bit(PIND_REG,pin_number);
			break;
	}
	
	return ((pinvalue) & (0X01));
}
 4b8:	08 95       	ret

000004ba <main>:

int main(void)
{

    /* Replace with your application code */
	DIO_VoidSetPinDirection(0,portD,OUTPUT);
 4ba:	41 e0       	ldi	r20, 0x01	; 1
 4bc:	65 e0       	ldi	r22, 0x05	; 5
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(4,portA,INPUT);
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	62 e0       	ldi	r22, 0x02	; 2
 4c8:	84 e0       	ldi	r24, 0x04	; 4
 4ca:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_VoidSetPinDirection>
	DIO_VoidSetPinValue(4,portA,HIGH);     //activate pull up resistor at pin A4
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	62 e0       	ldi	r22, 0x02	; 2
 4d2:	84 e0       	ldi	r24, 0x04	; 4
 4d4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_VoidSetPinValue>

	DIO_VoidSetPortDirection(portC,OUTPUT);
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	0e 94 48 01 	call	0x290	; 0x290 <DIO_VoidSetPortDirection>
	DIO_VoidSetPortValue(portC,HIGH);
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	84 e0       	ldi	r24, 0x04	; 4
 4e4:	0e 94 11 02 	call	0x422	; 0x422 <DIO_VoidSetPortValue>
	
    while (1) 
    {
		if (((DIO_U8GetPinValue(4,portA)) & (0X01)) == 0)
 4e8:	62 e0       	ldi	r22, 0x02	; 2
 4ea:	84 e0       	ldi	r24, 0x04	; 4
 4ec:	0e 94 24 02 	call	0x448	; 0x448 <DIO_U8GetPinValue>
 4f0:	80 fd       	sbrc	r24, 0
 4f2:	fa cf       	rjmp	.-12     	; 0x4e8 <main+0x2e>
		{
			DIO_VoidSetPinValue(0,portD,HIGH);
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	65 e0       	ldi	r22, 0x05	; 5
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_VoidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fe:	2f e9       	ldi	r18, 0x9F	; 159
 500:	86 e8       	ldi	r24, 0x86	; 134
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	21 50       	subi	r18, 0x01	; 1
 506:	80 40       	sbci	r24, 0x00	; 0
 508:	90 40       	sbci	r25, 0x00	; 0
 50a:	e1 f7       	brne	.-8      	; 0x504 <main+0x4a>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <main+0x54>
 50e:	00 00       	nop
			_delay_ms(500);
			DIO_VoidSetPinValue(0,portD,LOW);
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	65 e0       	ldi	r22, 0x05	; 5
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_VoidSetPinValue>
 51a:	2f e9       	ldi	r18, 0x9F	; 159
 51c:	86 e8       	ldi	r24, 0x86	; 134
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	21 50       	subi	r18, 0x01	; 1
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	90 40       	sbci	r25, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <main+0x66>
 528:	00 c0       	rjmp	.+0      	; 0x52a <main+0x70>
 52a:	00 00       	nop
 52c:	dd cf       	rjmp	.-70     	; 0x4e8 <main+0x2e>

0000052e <_exit>:
 52e:	f8 94       	cli

00000530 <__stop_program>:
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stop_program>
