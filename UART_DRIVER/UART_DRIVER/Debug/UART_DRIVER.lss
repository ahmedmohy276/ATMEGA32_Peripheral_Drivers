
UART_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001d6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006f  00800062  00800062  0000026c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a73  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000671  00000000  00000000  00000e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066c  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054b  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000610  00000000  00000000  00002273  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3d       	cpi	r26, 0xD1	; 209
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <avr/io.h>


int main(void)
{
  92:	ff cf       	rjmp	.-2      	; 0x92 <main>

00000094 <__vector_15>:




ISR(USART_TXC_vect)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	4f 93       	push	r20
  a4:	5f 93       	push	r21
  a6:	6f 93       	push	r22
  a8:	7f 93       	push	r23
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
  ae:	af 93       	push	r26
  b0:	bf 93       	push	r27
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	switch (status)
  b6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <status>
  ba:	88 23       	and	r24, r24
  bc:	31 f1       	breq	.+76     	; 0x10a <__vector_15+0x76>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	49 f5       	brne	.+82     	; 0x114 <__vector_15+0x80>
		case ASYNCH_char_TX :
		
			break;
		
		case ASYNCH_arr_TX :
			if (TX_string_ptr[TX_count] !='\0')
  c2:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <TX_string_ptr>
  c6:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <TX_string_ptr+0x1>
  ca:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d2:	e8 0f       	add	r30, r24
  d4:	f9 1f       	adc	r31, r25
  d6:	20 81       	ld	r18, Z
  d8:	22 23       	and	r18, r18
  da:	59 f0       	breq	.+22     	; 0xf2 <__vector_15+0x5e>
			{
				UDR_REG=TX_string_ptr[TX_count];
  dc:	2c b9       	out	0x0c, r18	; 12
				TX_count++;
  de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  f0:	11 c0       	rjmp	.+34     	; 0x114 <__vector_15+0x80>
			}
			
			else if (TX_string_ptr =='\0')
  f2:	89 2b       	or	r24, r25
  f4:	79 f4       	brne	.+30     	; 0x114 <__vector_15+0x80>
			{
				UDR_REG=END_FLAG;
  f6:	1c b8       	out	0x0c, r1	; 12
				TX_count=1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 100:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				status=NORMAL;
 104:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <status>
 108:	05 c0       	rjmp	.+10     	; 0x114 <__vector_15+0x80>
			}
			break;
		
		case NORMAL :
			TXptr();
 10a:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <TXptr>
 10e:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <TXptr+0x1>
 112:	09 95       	icall
			break;
	}
}
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	7f 91       	pop	r23
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_13>:



ISR(USART_RXC_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	switch (status)
 158:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <status>
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	29 f0       	breq	.+10     	; 0x16a <__vector_13+0x34>
 160:	84 30       	cpi	r24, 0x04	; 4
 162:	39 f0       	breq	.+14     	; 0x172 <__vector_13+0x3c>
 164:	81 11       	cpse	r24, r1
 166:	24 c0       	rjmp	.+72     	; 0x1b0 <__vector_13+0x7a>
 168:	1e c0       	rjmp	.+60     	; 0x1a6 <__vector_13+0x70>
	{
		case ASYNCH_char_RX :
			RX_received_char=UDR_REG;
 16a:	8c b1       	in	r24, 0x0c	; 12
 16c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <RX_received_char>
			break;
 170:	1f c0       	rjmp	.+62     	; 0x1b0 <__vector_13+0x7a>
		
		case ASYNCH_arr_RX :
			RX_array[RX_count] =UDR_REG;
 172:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 176:	29 2f       	mov	r18, r25
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	8c b1       	in	r24, 0x0c	; 12
 17c:	f9 01       	movw	r30, r18
 17e:	e5 59       	subi	r30, 0x95	; 149
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	80 83       	st	Z, r24
			if (RX_array[RX_count] !=END_FLAG)
 184:	88 23       	and	r24, r24
 186:	21 f0       	breq	.+8      	; 0x190 <__vector_13+0x5a>
			{
				RX_count++;
 188:	9f 5f       	subi	r25, 0xFF	; 255
 18a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__data_end>
 18e:	10 c0       	rjmp	.+32     	; 0x1b0 <__vector_13+0x7a>
			}
			
			else if (RX_array[RX_count] ==END_FLAG)
 190:	81 11       	cpse	r24, r1
 192:	0e c0       	rjmp	.+28     	; 0x1b0 <__vector_13+0x7a>
			{
				RX_array[RX_count] =END_FLAG;
 194:	f9 01       	movw	r30, r18
 196:	e5 59       	subi	r30, 0x95	; 149
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	10 82       	st	Z, r1
				RX_count=0;
 19c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
				status=NORMAL;
 1a0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <status>
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <__vector_13+0x7a>
			}
			
			break;
		
		case NORMAL :
			RXptr();
 1a6:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <RXptr>
 1aa:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <RXptr+0x1>
 1ae:	09 95       	icall
			break;
	}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
