
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000007cc  00000860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080006a  0080006a  0000086a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c2  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082e  00000000  00000000  00001aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e7  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00002cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000663  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000107a  00000000  00000000  000035cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00004649  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2b 02 	call	0x456	; 0x456 <main>
  8a:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_VoidSetPinDirection>:
#include "DIO_REG.h"
//#include <avr/io.h>

void DIO_VoidSetPinDirection(u8 pin_number,u8 port_number,u8 direction)
{
	switch(port_number)
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	39 f1       	breq	.+78     	; 0xe4 <DIO_VoidSetPinDirection+0x52>
  96:	38 f0       	brcs	.+14     	; 0xa6 <DIO_VoidSetPinDirection+0x14>
  98:	62 30       	cpi	r22, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_VoidSetPinDirection+0xc>
  9c:	42 c0       	rjmp	.+132    	; 0x122 <DIO_VoidSetPinDirection+0x90>
  9e:	63 30       	cpi	r22, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_VoidSetPinDirection+0x12>
  a2:	5e c0       	rjmp	.+188    	; 0x160 <DIO_VoidSetPinDirection+0xce>
  a4:	08 95       	ret
	{
		case portA:
			if (direction==OUTPUT)
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	69 f4       	brne	.+26     	; 0xc4 <DIO_VoidSetPinDirection+0x32>
			{
				SET_Bit(DDRA_REG,pin_number);
  aa:	4a b3       	in	r20, 0x1a	; 26
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	b9 01       	movw	r22, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_VoidSetPinDirection+0x26>
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	8a 95       	dec	r24
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_VoidSetPinDirection+0x22>
  bc:	cb 01       	movw	r24, r22
  be:	84 2b       	or	r24, r20
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
			}
			else if (direction==INPUT)
  c4:	41 11       	cpse	r20, r1
  c6:	6a c0       	rjmp	.+212    	; 0x19c <DIO_VoidSetPinDirection+0x10a>
			{
				CLEAR_Bit(DDRA_REG,pin_number);
  c8:	4a b3       	in	r20, 0x1a	; 26
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	b9 01       	movw	r22, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_VoidSetPinDirection+0x44>
  d2:	66 0f       	add	r22, r22
  d4:	77 1f       	adc	r23, r23
  d6:	8a 95       	dec	r24
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_VoidSetPinDirection+0x40>
  da:	cb 01       	movw	r24, r22
  dc:	80 95       	com	r24
  de:	84 23       	and	r24, r20
  e0:	8a bb       	out	0x1a, r24	; 26
  e2:	08 95       	ret
			}
			break;
		case portB:
			if (direction==OUTPUT)
  e4:	41 30       	cpi	r20, 0x01	; 1
  e6:	69 f4       	brne	.+26     	; 0x102 <DIO_VoidSetPinDirection+0x70>
			{
				SET_Bit(DDRB_REG,pin_number);
  e8:	47 b3       	in	r20, 0x17	; 23
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	b9 01       	movw	r22, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_VoidSetPinDirection+0x64>
  f2:	66 0f       	add	r22, r22
  f4:	77 1f       	adc	r23, r23
  f6:	8a 95       	dec	r24
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_VoidSetPinDirection+0x60>
  fa:	cb 01       	movw	r24, r22
  fc:	84 2b       	or	r24, r20
  fe:	87 bb       	out	0x17, r24	; 23
 100:	08 95       	ret
			}
			else if (direction==INPUT)
 102:	41 11       	cpse	r20, r1
 104:	4b c0       	rjmp	.+150    	; 0x19c <DIO_VoidSetPinDirection+0x10a>
			{
				CLEAR_Bit(DDRB_REG,pin_number);
 106:	47 b3       	in	r20, 0x17	; 23
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_VoidSetPinDirection+0x82>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_VoidSetPinDirection+0x7e>
 118:	cb 01       	movw	r24, r22
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	87 bb       	out	0x17, r24	; 23
 120:	08 95       	ret
			}
			break;
		case portC:
			if (direction==OUTPUT)
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	69 f4       	brne	.+26     	; 0x140 <DIO_VoidSetPinDirection+0xae>
			{
				SET_Bit(DDRC_REG,pin_number);
 126:	44 b3       	in	r20, 0x14	; 20
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_VoidSetPinDirection+0xa2>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_VoidSetPinDirection+0x9e>
 138:	cb 01       	movw	r24, r22
 13a:	84 2b       	or	r24, r20
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
			}
			else if (direction==INPUT)
 140:	41 11       	cpse	r20, r1
 142:	2c c0       	rjmp	.+88     	; 0x19c <DIO_VoidSetPinDirection+0x10a>
			{
				CLEAR_Bit(DDRC_REG,pin_number);
 144:	44 b3       	in	r20, 0x14	; 20
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	b9 01       	movw	r22, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_VoidSetPinDirection+0xc0>
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	8a 95       	dec	r24
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_VoidSetPinDirection+0xbc>
 156:	cb 01       	movw	r24, r22
 158:	80 95       	com	r24
 15a:	84 23       	and	r24, r20
 15c:	84 bb       	out	0x14, r24	; 20
 15e:	08 95       	ret
			}
			break;
		case portD:
			if (direction==OUTPUT)
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	69 f4       	brne	.+26     	; 0x17e <DIO_VoidSetPinDirection+0xec>
			{
				SET_Bit(DDRD_REG,pin_number);
 164:	41 b3       	in	r20, 0x11	; 17
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_VoidSetPinDirection+0xe0>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_VoidSetPinDirection+0xdc>
 176:	cb 01       	movw	r24, r22
 178:	84 2b       	or	r24, r20
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret
			}
			else if (direction==INPUT)
 17e:	41 11       	cpse	r20, r1
 180:	0d c0       	rjmp	.+26     	; 0x19c <DIO_VoidSetPinDirection+0x10a>
			{
				CLEAR_Bit(DDRD_REG,pin_number);
 182:	41 b3       	in	r20, 0x11	; 17
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	b9 01       	movw	r22, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_VoidSetPinDirection+0xfe>
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	8a 95       	dec	r24
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_VoidSetPinDirection+0xfa>
 194:	cb 01       	movw	r24, r22
 196:	80 95       	com	r24
 198:	84 23       	and	r24, r20
 19a:	81 bb       	out	0x11, r24	; 17
 19c:	08 95       	ret

0000019e <DIO_VoidSetPinValue>:
}


void DIO_VoidSetPinValue(u8 pin_number,u8 port_number,u8 value)
{
	switch(port_number)
 19e:	61 30       	cpi	r22, 0x01	; 1
 1a0:	39 f1       	breq	.+78     	; 0x1f0 <DIO_VoidSetPinValue+0x52>
 1a2:	38 f0       	brcs	.+14     	; 0x1b2 <DIO_VoidSetPinValue+0x14>
 1a4:	62 30       	cpi	r22, 0x02	; 2
 1a6:	09 f4       	brne	.+2      	; 0x1aa <DIO_VoidSetPinValue+0xc>
 1a8:	42 c0       	rjmp	.+132    	; 0x22e <DIO_VoidSetPinValue+0x90>
 1aa:	63 30       	cpi	r22, 0x03	; 3
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <DIO_VoidSetPinValue+0x12>
 1ae:	5e c0       	rjmp	.+188    	; 0x26c <DIO_VoidSetPinValue+0xce>
 1b0:	08 95       	ret
	{
		case portA:
			if (value==HIGH)
 1b2:	41 30       	cpi	r20, 0x01	; 1
 1b4:	69 f4       	brne	.+26     	; 0x1d0 <DIO_VoidSetPinValue+0x32>
			{
				SET_Bit(PORTA_REG,pin_number);
 1b6:	4b b3       	in	r20, 0x1b	; 27
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	b9 01       	movw	r22, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_VoidSetPinValue+0x26>
 1c0:	66 0f       	add	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	8a 95       	dec	r24
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_VoidSetPinValue+0x22>
 1c8:	cb 01       	movw	r24, r22
 1ca:	84 2b       	or	r24, r20
 1cc:	8b bb       	out	0x1b, r24	; 27
 1ce:	08 95       	ret
			}
			else if (value==LOW)
 1d0:	41 11       	cpse	r20, r1
 1d2:	6a c0       	rjmp	.+212    	; 0x2a8 <DIO_VoidSetPinValue+0x10a>
			{
				CLEAR_Bit(PORTA_REG,pin_number);
 1d4:	4b b3       	in	r20, 0x1b	; 27
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	b9 01       	movw	r22, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_VoidSetPinValue+0x44>
 1de:	66 0f       	add	r22, r22
 1e0:	77 1f       	adc	r23, r23
 1e2:	8a 95       	dec	r24
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_VoidSetPinValue+0x40>
 1e6:	cb 01       	movw	r24, r22
 1e8:	80 95       	com	r24
 1ea:	84 23       	and	r24, r20
 1ec:	8b bb       	out	0x1b, r24	; 27
 1ee:	08 95       	ret
			}
			break;
		case portB:
			if (value==HIGH)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_VoidSetPinValue+0x70>
			{
				SET_Bit(PORTB_REG,pin_number);
 1f4:	48 b3       	in	r20, 0x18	; 24
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	b9 01       	movw	r22, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_VoidSetPinValue+0x64>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	8a 95       	dec	r24
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_VoidSetPinValue+0x60>
 206:	cb 01       	movw	r24, r22
 208:	84 2b       	or	r24, r20
 20a:	88 bb       	out	0x18, r24	; 24
 20c:	08 95       	ret
			}
			else if (value==LOW)
 20e:	41 11       	cpse	r20, r1
 210:	4b c0       	rjmp	.+150    	; 0x2a8 <DIO_VoidSetPinValue+0x10a>
			{
				CLEAR_Bit(PORTB_REG,pin_number);
 212:	48 b3       	in	r20, 0x18	; 24
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	b9 01       	movw	r22, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_VoidSetPinValue+0x82>
 21c:	66 0f       	add	r22, r22
 21e:	77 1f       	adc	r23, r23
 220:	8a 95       	dec	r24
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_VoidSetPinValue+0x7e>
 224:	cb 01       	movw	r24, r22
 226:	80 95       	com	r24
 228:	84 23       	and	r24, r20
 22a:	88 bb       	out	0x18, r24	; 24
 22c:	08 95       	ret
			}
			break;
		
		case portC:
			if (value==HIGH)
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	69 f4       	brne	.+26     	; 0x24c <DIO_VoidSetPinValue+0xae>
			{
				SET_Bit(PORTC_REG,pin_number);
 232:	45 b3       	in	r20, 0x15	; 21
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	b9 01       	movw	r22, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_VoidSetPinValue+0xa2>
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	8a 95       	dec	r24
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_VoidSetPinValue+0x9e>
 244:	cb 01       	movw	r24, r22
 246:	84 2b       	or	r24, r20
 248:	85 bb       	out	0x15, r24	; 21
 24a:	08 95       	ret
			}
			else if (value==LOW)
 24c:	41 11       	cpse	r20, r1
 24e:	2c c0       	rjmp	.+88     	; 0x2a8 <DIO_VoidSetPinValue+0x10a>
			{
				CLEAR_Bit(PORTC_REG,pin_number);
 250:	45 b3       	in	r20, 0x15	; 21
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_VoidSetPinValue+0xc0>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_VoidSetPinValue+0xbc>
 262:	cb 01       	movw	r24, r22
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	85 bb       	out	0x15, r24	; 21
 26a:	08 95       	ret
			}
			break;
		case portD:
			if (value==HIGH)
 26c:	41 30       	cpi	r20, 0x01	; 1
 26e:	69 f4       	brne	.+26     	; 0x28a <DIO_VoidSetPinValue+0xec>
			{
				SET_Bit(PORTD_REG,pin_number);
 270:	42 b3       	in	r20, 0x12	; 18
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	b9 01       	movw	r22, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_VoidSetPinValue+0xe0>
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	8a 95       	dec	r24
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_VoidSetPinValue+0xdc>
 282:	cb 01       	movw	r24, r22
 284:	84 2b       	or	r24, r20
 286:	82 bb       	out	0x12, r24	; 18
 288:	08 95       	ret
			}
			else if (value==LOW)
 28a:	41 11       	cpse	r20, r1
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <DIO_VoidSetPinValue+0x10a>
			{
				CLEAR_Bit(PORTD_REG,pin_number);
 28e:	42 b3       	in	r20, 0x12	; 18
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	b9 01       	movw	r22, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_VoidSetPinValue+0xfe>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	8a 95       	dec	r24
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_VoidSetPinValue+0xfa>
 2a0:	cb 01       	movw	r24, r22
 2a2:	80 95       	com	r24
 2a4:	84 23       	and	r24, r20
 2a6:	82 bb       	out	0x12, r24	; 18
 2a8:	08 95       	ret

000002aa <DIO_VoidSetPortDirection>:


void DIO_VoidSetPortDirection(u8 port_number,u8 direction)
{
	u8 pinnumber=8;
	switch(port_number)
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	b9 f1       	breq	.+110    	; 0x31c <DIO_VoidSetPortDirection+0x72>
 2ae:	38 f0       	brcs	.+14     	; 0x2be <DIO_VoidSetPortDirection+0x14>
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <DIO_VoidSetPortDirection+0xc>
 2b4:	62 c0       	rjmp	.+196    	; 0x37a <DIO_VoidSetPortDirection+0xd0>
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	09 f4       	brne	.+2      	; 0x2bc <DIO_VoidSetPortDirection+0x12>
 2ba:	8e c0       	rjmp	.+284    	; 0x3d8 <DIO_VoidSetPortDirection+0x12e>
 2bc:	08 95       	ret
	{
		case portA:
			if (direction==OUTPUT)
 2be:	61 30       	cpi	r22, 0x01	; 1
 2c0:	a9 f4       	brne	.+42     	; 0x2ec <DIO_VoidSetPortDirection+0x42>
 2c2:	0e c0       	rjmp	.+28     	; 0x2e0 <DIO_VoidSetPortDirection+0x36>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRA_REG,i);
 2c4:	4a b3       	in	r20, 0x1a	; 26
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 2e       	mov	r0, r18
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_VoidSetPortDirection+0x28>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_VoidSetPortDirection+0x24>
 2d6:	84 2b       	or	r24, r20
 2d8:	8a bb       	out	0x1a, r24	; 26
	switch(port_number)
	{
		case portA:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 2da:	2f 5f       	subi	r18, 0xFF	; 255
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_VoidSetPortDirection+0x3a>
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	28 30       	cpi	r18, 0x08	; 8
 2e6:	31 05       	cpc	r19, r1
 2e8:	68 f3       	brcs	.-38     	; 0x2c4 <DIO_VoidSetPortDirection+0x1a>
 2ea:	08 95       	ret
				{
					SET_Bit(DDRA_REG,i);
				}
			}
			else if (direction==INPUT)
 2ec:	66 23       	and	r22, r22
 2ee:	81 f0       	breq	.+32     	; 0x310 <DIO_VoidSetPortDirection+0x66>
 2f0:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRA_REG,i);
 2f2:	4a b3       	in	r20, 0x1a	; 26
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_VoidSetPortDirection+0x56>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_VoidSetPortDirection+0x52>
 304:	80 95       	com	r24
 306:	84 23       	and	r24, r20
 308:	8a bb       	out	0x1a, r24	; 26
					SET_Bit(DDRA_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 30a:	2f 5f       	subi	r18, 0xFF	; 255
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_VoidSetPortDirection+0x6a>
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	28 30       	cpi	r18, 0x08	; 8
 316:	31 05       	cpc	r19, r1
 318:	60 f3       	brcs	.-40     	; 0x2f2 <DIO_VoidSetPortDirection+0x48>
 31a:	08 95       	ret
					CLEAR_Bit(DDRA_REG,i);
				}
			}
		break;
		case portB:
			if (direction==OUTPUT)
 31c:	61 30       	cpi	r22, 0x01	; 1
 31e:	a9 f4       	brne	.+42     	; 0x34a <DIO_VoidSetPortDirection+0xa0>
 320:	0e c0       	rjmp	.+28     	; 0x33e <DIO_VoidSetPortDirection+0x94>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRB_REG,i);
 322:	47 b3       	in	r20, 0x17	; 23
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 2e       	mov	r0, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_VoidSetPortDirection+0x86>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_VoidSetPortDirection+0x82>
 334:	84 2b       	or	r24, r20
 336:	87 bb       	out	0x17, r24	; 23
			}
		break;
		case portB:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 338:	2f 5f       	subi	r18, 0xFF	; 255
 33a:	3f 4f       	sbci	r19, 0xFF	; 255
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_VoidSetPortDirection+0x98>
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	28 30       	cpi	r18, 0x08	; 8
 344:	31 05       	cpc	r19, r1
 346:	68 f3       	brcs	.-38     	; 0x322 <DIO_VoidSetPortDirection+0x78>
 348:	08 95       	ret
				{
					SET_Bit(DDRB_REG,i);
				}
			}
			else if (direction==INPUT)
 34a:	66 23       	and	r22, r22
 34c:	81 f0       	breq	.+32     	; 0x36e <DIO_VoidSetPortDirection+0xc4>
 34e:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRB_REG,i);
 350:	47 b3       	in	r20, 0x17	; 23
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 2e       	mov	r0, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_VoidSetPortDirection+0xb4>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_VoidSetPortDirection+0xb0>
 362:	80 95       	com	r24
 364:	84 23       	and	r24, r20
 366:	87 bb       	out	0x17, r24	; 23
					SET_Bit(DDRB_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 368:	2f 5f       	subi	r18, 0xFF	; 255
 36a:	3f 4f       	sbci	r19, 0xFF	; 255
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_VoidSetPortDirection+0xc8>
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	28 30       	cpi	r18, 0x08	; 8
 374:	31 05       	cpc	r19, r1
 376:	60 f3       	brcs	.-40     	; 0x350 <DIO_VoidSetPortDirection+0xa6>
 378:	08 95       	ret
					CLEAR_Bit(DDRB_REG,i);
				}
			}
			break;
		case portC:
			if (direction==OUTPUT)
 37a:	61 30       	cpi	r22, 0x01	; 1
 37c:	a9 f4       	brne	.+42     	; 0x3a8 <DIO_VoidSetPortDirection+0xfe>
 37e:	0e c0       	rjmp	.+28     	; 0x39c <DIO_VoidSetPortDirection+0xf2>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRC_REG,i);
 380:	44 b3       	in	r20, 0x14	; 20
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 2e       	mov	r0, r18
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_VoidSetPortDirection+0xe4>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	0a 94       	dec	r0
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_VoidSetPortDirection+0xe0>
 392:	84 2b       	or	r24, r20
 394:	84 bb       	out	0x14, r24	; 20
			}
			break;
		case portC:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 396:	2f 5f       	subi	r18, 0xFF	; 255
 398:	3f 4f       	sbci	r19, 0xFF	; 255
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_VoidSetPortDirection+0xf6>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	28 30       	cpi	r18, 0x08	; 8
 3a2:	31 05       	cpc	r19, r1
 3a4:	68 f3       	brcs	.-38     	; 0x380 <DIO_VoidSetPortDirection+0xd6>
 3a6:	08 95       	ret
				{
					SET_Bit(DDRC_REG,i);
				}
			}
			else if (direction==INPUT)
 3a8:	66 23       	and	r22, r22
 3aa:	81 f0       	breq	.+32     	; 0x3cc <DIO_VoidSetPortDirection+0x122>
 3ac:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRC_REG,i);
 3ae:	44 b3       	in	r20, 0x14	; 20
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 2e       	mov	r0, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_VoidSetPortDirection+0x112>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_VoidSetPortDirection+0x10e>
 3c0:	80 95       	com	r24
 3c2:	84 23       	and	r24, r20
 3c4:	84 bb       	out	0x14, r24	; 20
					SET_Bit(DDRC_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_VoidSetPortDirection+0x126>
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	28 30       	cpi	r18, 0x08	; 8
 3d2:	31 05       	cpc	r19, r1
 3d4:	60 f3       	brcs	.-40     	; 0x3ae <DIO_VoidSetPortDirection+0x104>
 3d6:	08 95       	ret
					CLEAR_Bit(DDRC_REG,i);
				}
			}
			break;
		case portD:
			if (direction==OUTPUT)
 3d8:	61 30       	cpi	r22, 0x01	; 1
 3da:	a9 f4       	brne	.+42     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3dc:	0e c0       	rjmp	.+28     	; 0x3fa <DIO_VoidSetPortDirection+0x150>
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					SET_Bit(DDRD_REG,i);
 3de:	41 b3       	in	r20, 0x11	; 17
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_VoidSetPortDirection+0x142>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_VoidSetPortDirection+0x13e>
 3f0:	84 2b       	or	r24, r20
 3f2:	81 bb       	out	0x11, r24	; 17
			}
			break;
		case portD:
			if (direction==OUTPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 3f4:	2f 5f       	subi	r18, 0xFF	; 255
 3f6:	3f 4f       	sbci	r19, 0xFF	; 255
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_VoidSetPortDirection+0x154>
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	28 30       	cpi	r18, 0x08	; 8
 400:	31 05       	cpc	r19, r1
 402:	68 f3       	brcs	.-38     	; 0x3de <DIO_VoidSetPortDirection+0x134>
 404:	08 95       	ret
				{
					SET_Bit(DDRD_REG,i);
				}
			}
			else if (direction==INPUT)
 406:	66 23       	and	r22, r22
 408:	81 f0       	breq	.+32     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 40a:	08 95       	ret
			{
				for (u16 i=0; i<pinnumber; i++)
				{
					CLEAR_Bit(DDRD_REG,i);
 40c:	41 b3       	in	r20, 0x11	; 17
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 2e       	mov	r0, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	0a 94       	dec	r0
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	80 95       	com	r24
 420:	84 23       	and	r24, r20
 422:	81 bb       	out	0x11, r24	; 17
					SET_Bit(DDRD_REG,i);
				}
			}
			else if (direction==INPUT)
			{
				for (u16 i=0; i<pinnumber; i++)
 424:	2f 5f       	subi	r18, 0xFF	; 255
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	28 30       	cpi	r18, 0x08	; 8
 430:	31 05       	cpc	r19, r1
 432:	60 f3       	brcs	.-40     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 434:	08 95       	ret

00000436 <DIO_VoidSetPortValue>:
}


void DIO_VoidSetPortValue(u8 port_number,u8 value)
{
	switch(port_number)
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	41 f0       	breq	.+16     	; 0x44a <DIO_VoidSetPortValue+0x14>
 43a:	28 f0       	brcs	.+10     	; 0x446 <DIO_VoidSetPortValue+0x10>
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	39 f0       	breq	.+14     	; 0x44e <DIO_VoidSetPortValue+0x18>
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	39 f0       	breq	.+14     	; 0x452 <DIO_VoidSetPortValue+0x1c>
 444:	08 95       	ret
	{
		case portA:
			PORTA_REG =value;
 446:	6b bb       	out	0x1b, r22	; 27
			break;
 448:	08 95       	ret
		case portB:
			PORTB_REG =value;
 44a:	68 bb       	out	0x18, r22	; 24
			break;
 44c:	08 95       	ret
		case portC:
			PORTC_REG =value;
 44e:	65 bb       	out	0x15, r22	; 21
			break;
 450:	08 95       	ret
		case portD:
			PORTD_REG =value;
 452:	62 bb       	out	0x12, r22	; 18
 454:	08 95       	ret

00000456 <main>:
#include <util/delay.h>
#include <stdlib.h>


int main(void)
{
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	00 d0       	rcall	.+0      	; 0x45c <main+0x6>
 45c:	00 d0       	rcall	.+0      	; 0x45e <main+0x8>
 45e:	00 d0       	rcall	.+0      	; 0x460 <main+0xa>
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62

    /* Replace with your application code */
	u8 T_data=1;
	u8 R_data;
	u8 arr[] ={1,2,4,8,15,'\0'};
 464:	86 e0       	ldi	r24, 0x06	; 6
 466:	e4 e6       	ldi	r30, 0x64	; 100
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	de 01       	movw	r26, r28
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	01 90       	ld	r0, Z+
 470:	0d 92       	st	X+, r0
 472:	8a 95       	dec	r24
 474:	e1 f7       	brne	.-8      	; 0x46e <main+0x18>
	ptr[2] =4;
	ptr[3] =8;
	ptr[4] =15;
	ptr[5] ='\0';*/
	
	DIO_VoidSetPortDirection(portC,OUTPUT);
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_VoidSetPortDirection>
	DIO_VoidSetPortDirection(portA,INPUT);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_VoidSetPortDirection>
	DIO_VoidSetPortValue(portA,0XFF);
 486:	6f ef       	ldi	r22, 0xFF	; 255
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_VoidSetPortValue>
	SPI_VoidSetDoubleSpeed(DOUBLE_SPEED_OFF);
	SPI_VoidSetDataOrder(MSB_ORDER);
	SPI_VoidSetClockPolarity(RISING_FALLING);
	SPI_VoidSetClockPhase(SAMPLE_SETUP);
	SPI_VoidMasterInit();*/
	SPI_VoidSPIInitialization(MASTER,INT_DISABLE,MSB_ORDER,RISING_FALLING,SAMPLE_SETUP,FOSC_128,DOUBLE_SPEED_OFF);
 48e:	0f 2e       	mov	r0, r31
 490:	ff e0       	ldi	r31, 0x0F	; 15
 492:	cf 2e       	mov	r12, r31
 494:	f0 2d       	mov	r31, r0
 496:	0f 2e       	mov	r0, r31
 498:	fd e0       	ldi	r31, 0x0D	; 13
 49a:	ef 2e       	mov	r14, r31
 49c:	f0 2d       	mov	r31, r0
 49e:	08 e0       	ldi	r16, 0x08	; 8
 4a0:	26 e0       	ldi	r18, 0x06	; 6
 4a2:	43 e0       	ldi	r20, 0x03	; 3
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	80 e1       	ldi	r24, 0x10	; 16
 4a8:	0e 94 07 03 	call	0x60e	; 0x60e <SPI_VoidSPIInitialization>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ac:	8f e4       	ldi	r24, 0x4F	; 79
 4ae:	93 ec       	ldi	r25, 0xC3	; 195
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <main+0x5a>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <main+0x60>
 4b6:	00 00       	nop
	/*R_data=SPI_U8_SynchSendData(arr[1]);
	R_data=SPI_U8_SynchSendData(arr[2]);
	R_data=SPI_U8_SynchSendData(arr[3]);
	R_data=SPI_U8_SynchSendData(arr[4]);*/
	
	ptr =SPI_U8_SynchSendString(arr);
 4b8:	ce 01       	movw	r24, r28
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	0e 94 38 03 	call	0x670	; 0x670 <SPI_U8_SynchSendString>
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <main+0x6a>

000004c2 <SPI_VoidMasterInit>:
	SPI_VoidInterruptEnable(INT_ENABLE);
	data_received=&received_Data;
	TX_DATA=data;
	status=RECEIVE_ASYNCH_arr;
	SPDR_REG=TX_DATA[0];
}
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	84 e0       	ldi	r24, 0x04	; 4
 4c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	84 e0       	ldi	r24, 0x04	; 4
 4d2:	0e 94 cf 00 	call	0x19e	; 0x19e <DIO_VoidSetPinValue>
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
 4e0:	40 e0       	ldi	r20, 0x00	; 0
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	86 e0       	ldi	r24, 0x06	; 6
 4e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	87 e0       	ldi	r24, 0x07	; 7
 4f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
 4f4:	8d b1       	in	r24, 0x0d	; 13
 4f6:	80 61       	ori	r24, 0x10	; 16
 4f8:	8d b9       	out	0x0d, r24	; 13
 4fa:	8d b1       	in	r24, 0x0d	; 13
 4fc:	80 64       	ori	r24, 0x40	; 64
 4fe:	8d b9       	out	0x0d, r24	; 13
 500:	08 95       	ret

00000502 <SPI_VoidSlaveInit>:
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	84 e0       	ldi	r24, 0x04	; 4
 508:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	85 e0       	ldi	r24, 0x05	; 5
 512:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	86 e0       	ldi	r24, 0x06	; 6
 51c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	87 e0       	ldi	r24, 0x07	; 7
 526:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
 52a:	8d b1       	in	r24, 0x0d	; 13
 52c:	8f 7e       	andi	r24, 0xEF	; 239
 52e:	8d b9       	out	0x0d, r24	; 13
 530:	8d b1       	in	r24, 0x0d	; 13
 532:	80 64       	ori	r24, 0x40	; 64
 534:	8d b9       	out	0x0d, r24	; 13
 536:	08 95       	ret

00000538 <SPI_VoidInterruptEnable>:
 538:	88 23       	and	r24, r24
 53a:	19 f0       	breq	.+6      	; 0x542 <SPI_VoidInterruptEnable+0xa>
 53c:	81 30       	cpi	r24, 0x01	; 1
 53e:	41 f0       	breq	.+16     	; 0x550 <SPI_VoidInterruptEnable+0x18>
 540:	08 95       	ret
 542:	8d b1       	in	r24, 0x0d	; 13
 544:	80 68       	ori	r24, 0x80	; 128
 546:	8d b9       	out	0x0d, r24	; 13
 548:	8f b7       	in	r24, 0x3f	; 63
 54a:	80 68       	ori	r24, 0x80	; 128
 54c:	8f bf       	out	0x3f, r24	; 63
 54e:	08 95       	ret
 550:	8d b1       	in	r24, 0x0d	; 13
 552:	8f 77       	andi	r24, 0x7F	; 127
 554:	8d b9       	out	0x0d, r24	; 13
 556:	08 95       	ret

00000558 <SPI_VoidSetDataOrder>:
 558:	82 30       	cpi	r24, 0x02	; 2
 55a:	19 f0       	breq	.+6      	; 0x562 <SPI_VoidSetDataOrder+0xa>
 55c:	83 30       	cpi	r24, 0x03	; 3
 55e:	29 f0       	breq	.+10     	; 0x56a <SPI_VoidSetDataOrder+0x12>
 560:	08 95       	ret
 562:	8d b1       	in	r24, 0x0d	; 13
 564:	80 62       	ori	r24, 0x20	; 32
 566:	8d b9       	out	0x0d, r24	; 13
 568:	08 95       	ret
 56a:	8d b1       	in	r24, 0x0d	; 13
 56c:	8f 7d       	andi	r24, 0xDF	; 223
 56e:	8d b9       	out	0x0d, r24	; 13
 570:	08 95       	ret

00000572 <SPI_VoidSetClockPolarity>:
 572:	86 30       	cpi	r24, 0x06	; 6
 574:	19 f0       	breq	.+6      	; 0x57c <SPI_VoidSetClockPolarity+0xa>
 576:	87 30       	cpi	r24, 0x07	; 7
 578:	29 f0       	breq	.+10     	; 0x584 <SPI_VoidSetClockPolarity+0x12>
 57a:	08 95       	ret
 57c:	8d b1       	in	r24, 0x0d	; 13
 57e:	87 7f       	andi	r24, 0xF7	; 247
 580:	8d b9       	out	0x0d, r24	; 13
 582:	08 95       	ret
 584:	8d b1       	in	r24, 0x0d	; 13
 586:	88 60       	ori	r24, 0x08	; 8
 588:	8d b9       	out	0x0d, r24	; 13
 58a:	08 95       	ret

0000058c <SPI_VoidSetClockPhase>:
 58c:	88 30       	cpi	r24, 0x08	; 8
 58e:	19 f0       	breq	.+6      	; 0x596 <SPI_VoidSetClockPhase+0xa>
 590:	89 30       	cpi	r24, 0x09	; 9
 592:	29 f0       	breq	.+10     	; 0x59e <SPI_VoidSetClockPhase+0x12>
 594:	08 95       	ret
 596:	8d b1       	in	r24, 0x0d	; 13
 598:	8b 7f       	andi	r24, 0xFB	; 251
 59a:	8d b9       	out	0x0d, r24	; 13
 59c:	08 95       	ret
 59e:	8d b1       	in	r24, 0x0d	; 13
 5a0:	84 60       	ori	r24, 0x04	; 4
 5a2:	8d b9       	out	0x0d, r24	; 13
 5a4:	08 95       	ret

000005a6 <SPI_VoidSetClockRate>:
 5a6:	8b 30       	cpi	r24, 0x0B	; 11
 5a8:	81 f0       	breq	.+32     	; 0x5ca <SPI_VoidSetClockRate+0x24>
 5aa:	18 f4       	brcc	.+6      	; 0x5b2 <SPI_VoidSetClockRate+0xc>
 5ac:	8a 30       	cpi	r24, 0x0A	; 10
 5ae:	31 f0       	breq	.+12     	; 0x5bc <SPI_VoidSetClockRate+0x16>
 5b0:	08 95       	ret
 5b2:	8c 30       	cpi	r24, 0x0C	; 12
 5b4:	89 f0       	breq	.+34     	; 0x5d8 <SPI_VoidSetClockRate+0x32>
 5b6:	8d 30       	cpi	r24, 0x0D	; 13
 5b8:	b1 f0       	breq	.+44     	; 0x5e6 <SPI_VoidSetClockRate+0x40>
 5ba:	08 95       	ret
 5bc:	8d b1       	in	r24, 0x0d	; 13
 5be:	8e 7f       	andi	r24, 0xFE	; 254
 5c0:	8d b9       	out	0x0d, r24	; 13
 5c2:	8d b1       	in	r24, 0x0d	; 13
 5c4:	8d 7f       	andi	r24, 0xFD	; 253
 5c6:	8d b9       	out	0x0d, r24	; 13
 5c8:	08 95       	ret
 5ca:	8d b1       	in	r24, 0x0d	; 13
 5cc:	81 60       	ori	r24, 0x01	; 1
 5ce:	8d b9       	out	0x0d, r24	; 13
 5d0:	8d b1       	in	r24, 0x0d	; 13
 5d2:	8d 7f       	andi	r24, 0xFD	; 253
 5d4:	8d b9       	out	0x0d, r24	; 13
 5d6:	08 95       	ret
 5d8:	8d b1       	in	r24, 0x0d	; 13
 5da:	8e 7f       	andi	r24, 0xFE	; 254
 5dc:	8d b9       	out	0x0d, r24	; 13
 5de:	8d b1       	in	r24, 0x0d	; 13
 5e0:	82 60       	ori	r24, 0x02	; 2
 5e2:	8d b9       	out	0x0d, r24	; 13
 5e4:	08 95       	ret
 5e6:	8d b1       	in	r24, 0x0d	; 13
 5e8:	81 60       	ori	r24, 0x01	; 1
 5ea:	8d b9       	out	0x0d, r24	; 13
 5ec:	8d b1       	in	r24, 0x0d	; 13
 5ee:	82 60       	ori	r24, 0x02	; 2
 5f0:	8d b9       	out	0x0d, r24	; 13
 5f2:	08 95       	ret

000005f4 <SPI_VoidSetDoubleSpeed>:
 5f4:	8e 30       	cpi	r24, 0x0E	; 14
 5f6:	19 f0       	breq	.+6      	; 0x5fe <SPI_VoidSetDoubleSpeed+0xa>
 5f8:	8f 30       	cpi	r24, 0x0F	; 15
 5fa:	29 f0       	breq	.+10     	; 0x606 <SPI_VoidSetDoubleSpeed+0x12>
 5fc:	08 95       	ret
 5fe:	8e b1       	in	r24, 0x0e	; 14
 600:	81 60       	ori	r24, 0x01	; 1
 602:	8e b9       	out	0x0e, r24	; 14
 604:	08 95       	ret
 606:	8e b1       	in	r24, 0x0e	; 14
 608:	8e 7f       	andi	r24, 0xFE	; 254
 60a:	8e b9       	out	0x0e, r24	; 14
 60c:	08 95       	ret

0000060e <SPI_VoidSPIInitialization>:
 60e:	cf 92       	push	r12
 610:	ef 92       	push	r14
 612:	0f 93       	push	r16
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	c8 2f       	mov	r28, r24
 61c:	86 2f       	mov	r24, r22
 61e:	14 2f       	mov	r17, r20
 620:	d2 2f       	mov	r29, r18
 622:	0e 94 9c 02 	call	0x538	; 0x538 <SPI_VoidInterruptEnable>
 626:	81 2f       	mov	r24, r17
 628:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_VoidSetDataOrder>
 62c:	8d 2f       	mov	r24, r29
 62e:	0e 94 b9 02 	call	0x572	; 0x572 <SPI_VoidSetClockPolarity>
 632:	80 2f       	mov	r24, r16
 634:	0e 94 c6 02 	call	0x58c	; 0x58c <SPI_VoidSetClockPhase>
 638:	8e 2d       	mov	r24, r14
 63a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_VoidSetClockRate>
 63e:	8c 2d       	mov	r24, r12
 640:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SPI_VoidSetDoubleSpeed>
 644:	c0 31       	cpi	r28, 0x10	; 16
 646:	19 f0       	breq	.+6      	; 0x64e <SPI_VoidSPIInitialization+0x40>
 648:	c1 31       	cpi	r28, 0x11	; 17
 64a:	21 f0       	breq	.+8      	; 0x654 <SPI_VoidSPIInitialization+0x46>
 64c:	05 c0       	rjmp	.+10     	; 0x658 <SPI_VoidSPIInitialization+0x4a>
 64e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <SPI_VoidMasterInit>
 652:	02 c0       	rjmp	.+4      	; 0x658 <SPI_VoidSPIInitialization+0x4a>
 654:	0e 94 81 02 	call	0x502	; 0x502 <SPI_VoidSlaveInit>
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	1f 91       	pop	r17
 65e:	0f 91       	pop	r16
 660:	ef 90       	pop	r14
 662:	cf 90       	pop	r12
 664:	08 95       	ret

00000666 <SPI_U8_SynchSendData>:
 666:	8f b9       	out	0x0f, r24	; 15
 668:	77 9b       	sbis	0x0e, 7	; 14
 66a:	fe cf       	rjmp	.-4      	; 0x668 <SPI_U8_SynchSendData+0x2>
 66c:	8f b1       	in	r24, 0x0f	; 15
 66e:	08 95       	ret

00000670 <SPI_U8_SynchSendString>:
 670:	ef 92       	push	r14
 672:	ff 92       	push	r15
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	7c 01       	movw	r14, r24
 67e:	c0 e0       	ldi	r28, 0x00	; 0
 680:	d0 e0       	ldi	r29, 0x00	; 0
 682:	05 c0       	rjmp	.+10     	; 0x68e <SPI_U8_SynchSendString+0x1e>
 684:	0e 94 33 03 	call	0x666	; 0x666 <SPI_U8_SynchSendData>
 688:	f8 01       	movw	r30, r16
 68a:	80 83       	st	Z, r24
 68c:	21 96       	adiw	r28, 0x01	; 1
 68e:	87 01       	movw	r16, r14
 690:	0c 0f       	add	r16, r28
 692:	1d 1f       	adc	r17, r29
 694:	f8 01       	movw	r30, r16
 696:	80 81       	ld	r24, Z
 698:	81 11       	cpse	r24, r1
 69a:	f4 cf       	rjmp	.-24     	; 0x684 <SPI_U8_SynchSendString+0x14>
 69c:	c7 01       	movw	r24, r14
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	1f 91       	pop	r17
 6a4:	0f 91       	pop	r16
 6a6:	ff 90       	pop	r15
 6a8:	ef 90       	pop	r14
 6aa:	08 95       	ret

000006ac <__vector_12>:

ISR(SPI_STC_vect)
{
 6ac:	1f 92       	push	r1
 6ae:	0f 92       	push	r0
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	0f 92       	push	r0
 6b4:	11 24       	eor	r1, r1
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	4f 93       	push	r20
 6bc:	5f 93       	push	r21
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
	switch (status)
 6ce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	39 f0       	breq	.+14     	; 0x6e4 <__vector_12+0x38>
 6d6:	08 f4       	brcc	.+2      	; 0x6da <__vector_12+0x2e>
 6d8:	61 c0       	rjmp	.+194    	; 0x79c <__vector_12+0xf0>
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	81 f1       	breq	.+96     	; 0x73e <__vector_12+0x92>
 6de:	84 30       	cpi	r24, 0x04	; 4
 6e0:	29 f0       	breq	.+10     	; 0x6ec <__vector_12+0x40>
 6e2:	61 c0       	rjmp	.+194    	; 0x7a6 <__vector_12+0xfa>
	{
		case ASYNCH_char:
			SPI_DATA=SPDR_REG;
 6e4:	8f b1       	in	r24, 0x0f	; 15
 6e6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <SPI_DATA>
			break;
 6ea:	5d c0       	rjmp	.+186    	; 0x7a6 <__vector_12+0xfa>
			
		case TRANSMITT_ASYNCH_arr:
			if (TX_DATA[counter] !='\0')
 6ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 6f0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counter+0x1>
 6f4:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <TX_DATA>
 6f8:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <TX_DATA+0x1>
 6fc:	e8 0f       	add	r30, r24
 6fe:	f9 1f       	adc	r31, r25
 700:	20 81       	ld	r18, Z
 702:	22 23       	and	r18, r18
 704:	89 f0       	breq	.+34     	; 0x728 <__vector_12+0x7c>
			{
				received_Data[counter-1]=SPDR_REG;
 706:	2f b1       	in	r18, 0x0f	; 15
 708:	dc 01       	movw	r26, r24
 70a:	a6 59       	subi	r26, 0x96	; 150
 70c:	bf 4f       	sbci	r27, 0xFF	; 255
 70e:	2c 93       	st	X, r18
				SPDR_REG=TX_DATA[counter];
 710:	80 81       	ld	r24, Z
 712:	8f b9       	out	0x0f, r24	; 15
				counter++;
 714:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 718:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counter+0x1>
 71c:	01 96       	adiw	r24, 0x01	; 1
 71e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <counter+0x1>
 722:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter>
 726:	3f c0       	rjmp	.+126    	; 0x7a6 <__vector_12+0xfa>
			} 
			
			else if (TX_DATA[counter] =='\0')
 728:	21 11       	cpse	r18, r1
 72a:	3d c0       	rjmp	.+122    	; 0x7a6 <__vector_12+0xfa>
			{
				//received_Data[counter]=SPDR_REG;
				//SPDR_REG =END_FLAG;
				counter=1;
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <counter+0x1>
 734:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter>
				status=NORMAL;
 738:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 73c:	34 c0       	rjmp	.+104    	; 0x7a6 <__vector_12+0xfa>
			break;
			
		case RECEIVE_ASYNCH_arr:
			//received_Data[counter-1]=SPDR_REG;
			//if (received_Data[counter-1] !=END_FLAG)
			if (counter <=data_size)
 73e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 742:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counter+0x1>
 746:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 74a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 74e:	28 17       	cp	r18, r24
 750:	39 07       	cpc	r19, r25
 752:	c0 f0       	brcs	.+48     	; 0x784 <__vector_12+0xd8>
			{
				received_Data[counter-1]=SPDR_REG;
 754:	2f b1       	in	r18, 0x0f	; 15
 756:	fc 01       	movw	r30, r24
 758:	e6 59       	subi	r30, 0x96	; 150
 75a:	ff 4f       	sbci	r31, 0xFF	; 255
 75c:	20 83       	st	Z, r18
				SPDR_REG=TX_DATA[counter];
 75e:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <TX_DATA>
 762:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <TX_DATA+0x1>
 766:	f9 01       	movw	r30, r18
 768:	e8 0f       	add	r30, r24
 76a:	f9 1f       	adc	r31, r25
 76c:	80 81       	ld	r24, Z
 76e:	8f b9       	out	0x0f, r24	; 15
				counter++;
 770:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 774:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counter+0x1>
 778:	01 96       	adiw	r24, 0x01	; 1
 77a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <counter+0x1>
 77e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter>
 782:	11 c0       	rjmp	.+34     	; 0x7a6 <__vector_12+0xfa>
			}
			//else if (received_Data[counter-1] ==END_FLAG)
			else if (counter >data_size)
 784:	28 17       	cp	r18, r24
 786:	39 07       	cpc	r19, r25
 788:	70 f4       	brcc	.+28     	; 0x7a6 <__vector_12+0xfa>
			{
				counter=1;
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <counter+0x1>
 792:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter>
				status=NORMAL;
 796:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 79a:	05 c0       	rjmp	.+10     	; 0x7a6 <__vector_12+0xfa>
			}
			break;
		
		case NORMAL:
			SPI_ptr();
 79c:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <SPI_ptr>
 7a0:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <SPI_ptr+0x1>
 7a4:	09 95       	icall
			break;
	}

}
 7a6:	ff 91       	pop	r31
 7a8:	ef 91       	pop	r30
 7aa:	bf 91       	pop	r27
 7ac:	af 91       	pop	r26
 7ae:	9f 91       	pop	r25
 7b0:	8f 91       	pop	r24
 7b2:	7f 91       	pop	r23
 7b4:	6f 91       	pop	r22
 7b6:	5f 91       	pop	r21
 7b8:	4f 91       	pop	r20
 7ba:	3f 91       	pop	r19
 7bc:	2f 91       	pop	r18
 7be:	0f 90       	pop	r0
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	0f 90       	pop	r0
 7c4:	1f 90       	pop	r1
 7c6:	18 95       	reti

000007c8 <_exit>:
 7c8:	f8 94       	cli

000007ca <__stop_program>:
 7ca:	ff cf       	rjmp	.-2      	; 0x7ca <__stop_program>
